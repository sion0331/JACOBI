import numpy as np

def eq_0_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), x_2(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (x_2/x_3)

def eq_0_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*cos(x_2(t)), exp(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1)*np.cos(x_2)) + betas[3] * (np.exp(x_1)) + betas[4] * (x_2)

def eq_0_2(X, betas, t):
    # dx_3/dt = [x_1(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*np.sin(x_2))

def system_0(X, betas, t):
    return np.array([eq_0_0(X, betas, t), eq_0_1(X, betas, t), eq_0_2(X, betas, t)])

def eq_1_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(x_1)) + betas[1] * (x_3)

def eq_1_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (x_3)

def eq_1_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), exp(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (np.exp(x_2)) + betas[6] * (x_3)

def system_1(X, betas, t):
    return np.array([eq_1_0(X, betas, t), eq_1_1(X, betas, t), eq_1_2(X, betas, t)])

def eq_2_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_3)

def eq_2_1(X, betas, t):
    # dx_2/dt = [x_1(t)*sin(x_2(t)), x_2(t), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*np.sin(x_2)) + betas[3] * (x_2) + betas[4] * (x_3*np.sin(x_2))

def eq_2_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_1)*np.cos(x_2)) + betas[6] * (np.sin(x_3))

def system_2(X, betas, t):
    return np.array([eq_2_0(X, betas, t), eq_2_1(X, betas, t), eq_2_2(X, betas, t)])

def eq_3_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_1/x_3)

def eq_3_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), sin(x_1(t)), x_1(t)/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1)) + betas[3] * (np.sin(x_1)) + betas[4] * (x_1/np.cos(x_3))

def eq_3_2(X, betas, t):
    # dx_3/dt = [cos(x_1(t)), x_3(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_1)) + betas[6] * (x_3) + betas[7] * (np.sin(x_3))

def system_3(X, betas, t):
    return np.array([eq_3_0(X, betas, t), eq_3_1(X, betas, t), eq_3_2(X, betas, t)])

def eq_4_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t))*sin(x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)*np.sin(x_1)) + betas[1] * (x_1)

def eq_4_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), sin(x_2(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*x_3) + betas[3] * (np.sin(x_2)/x_3)

def eq_4_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), sin(x_3(t)), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_1)) + betas[5] * (np.sin(x_3)) + betas[6] * (x_1/x_3)

def system_4(X, betas, t):
    return np.array([eq_4_0(X, betas, t), eq_4_1(X, betas, t), eq_4_2(X, betas, t)])

def eq_5_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_1(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_1/x_2)

def eq_5_1(X, betas, t):
    # dx_2/dt = [x_1(t)*cos(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*np.cos(x_3)) + betas[3] * (x_1)

def eq_5_2(X, betas, t):
    # dx_3/dt = [x_2(t), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_2) + betas[5] * (x_1*np.sin(x_3))

def system_5(X, betas, t):
    return np.array([eq_5_0(X, betas, t), eq_5_1(X, betas, t), eq_5_2(X, betas, t)])

def eq_6_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))/x_3(t), x_1(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)/x_3) + betas[1] * (x_1) + betas[2] * (x_1*x_3)

def eq_6_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1))

def eq_6_2(X, betas, t):
    # dx_3/dt = [x_1(t), sin(x_3(t))/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1) + betas[5] * (np.sin(x_3)/np.cos(x_2))

def system_6(X, betas, t):
    return np.array([eq_6_0(X, betas, t), eq_6_1(X, betas, t), eq_6_2(X, betas, t)])

def eq_7_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)*exp(x_2(t)), x_1(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1*np.exp(x_2)) + betas[2] * (x_1/x_2)

def eq_7_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t))/cos(x_1(t)), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_2)/np.cos(x_1)) + betas[4] * (np.exp(x_2))

def eq_7_2(X, betas, t):
    # dx_3/dt = [cos(x_2(t)), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_2)) + betas[6] * (np.cos(x_3))

def system_7(X, betas, t):
    return np.array([eq_7_0(X, betas, t), eq_7_1(X, betas, t), eq_7_2(X, betas, t)])

def eq_8_0(X, betas, t):
    # dx_1/dt = [x_2(t), sin(x_1(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2) + betas[1] * (np.sin(x_1)) + betas[2] * (np.sin(x_3))

def eq_8_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_2) + betas[4] * (x_3) + betas[5] * (x_1)

def eq_8_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), x_1(t)*x_3(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (np.cos(x_3)) + betas[7] * (x_1*x_3) + betas[8] * (x_2)

def system_8(X, betas, t):
    return np.array([eq_8_0(X, betas, t), eq_8_1(X, betas, t), eq_8_2(X, betas, t)])

def eq_9_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_1(t))/x_3(t), cos(x_2(t))/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_1)/x_3) + betas[2] * (np.cos(x_2)/np.cos(x_3))

def eq_9_1(X, betas, t):
    # dx_2/dt = [x_1(t)*exp(-x_2(t)), x_1(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.exp(-x_2)) + betas[4] * (x_1*np.cos(x_3))

def eq_9_2(X, betas, t):
    # dx_3/dt = [x_1(t)*cos(x_3(t)), sin(x_1(t)), x_2(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*np.cos(x_3)) + betas[6] * (np.sin(x_1)) + betas[7] * (x_2*np.sin(x_1))

def system_9(X, betas, t):
    return np.array([eq_9_0(X, betas, t), eq_9_1(X, betas, t), eq_9_2(X, betas, t)])

def eq_10_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_2(t)), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_2)) + betas[2] * (np.sin(x_1))

def eq_10_1(X, betas, t):
    # dx_2/dt = [x_1(t), exp(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1) + betas[4] * (np.exp(x_1)) + betas[5] * (x_3)

def eq_10_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t))*cos(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (np.sin(x_3)*np.cos(x_2)) + betas[7] * (x_3)

def system_10(X, betas, t):
    return np.array([eq_10_0(X, betas, t), eq_10_1(X, betas, t), eq_10_2(X, betas, t)])

def eq_11_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_3))

def eq_11_1(X, betas, t):
    # dx_2/dt = [x_1(t), exp(x_2(t)), x_2(t)*exp(-x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (np.exp(x_2)) + betas[4] * (x_2*np.exp(-x_3))

def eq_11_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_3(t), cos(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*x_3) + betas[6] * (np.cos(x_3)) + betas[7] * (x_1)

def system_11(X, betas, t):
    return np.array([eq_11_0(X, betas, t), eq_11_1(X, betas, t), eq_11_2(X, betas, t)])

def eq_12_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), cos(x_1(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (np.cos(x_1)) + betas[2] * (np.sin(x_3))

def eq_12_1(X, betas, t):
    # dx_2/dt = [x_3(t), exp(x_1(t))*exp(x_2(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3) + betas[4] * (np.exp(x_1)*np.exp(x_2)) + betas[5] * (np.exp(x_1))

def eq_12_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_1(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_3) + betas[7] * (x_1) + betas[8] * (x_1*x_3)

def system_12(X, betas, t):
    return np.array([eq_12_0(X, betas, t), eq_12_1(X, betas, t), eq_12_2(X, betas, t)])

def eq_13_0(X, betas, t):
    # dx_1/dt = [x_2(t)*sin(x_1(t)), x_1(t)*exp(-x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.sin(x_1)) + betas[1] * (x_1*np.exp(-x_3)) + betas[2] * (x_1)

def eq_13_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_1)/x_3)

def eq_13_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t)), x_2(t), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_3)) + betas[5] * (x_2) + betas[6] * (np.cos(x_2))

def system_13(X, betas, t):
    return np.array([eq_13_0(X, betas, t), eq_13_1(X, betas, t), eq_13_2(X, betas, t)])

def eq_14_0(X, betas, t):
    # dx_1/dt = [x_3(t)*sin(x_1(t)), x_3(t), x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.sin(x_1)) + betas[1] * (x_3) + betas[2] * (x_1*x_2)

def eq_14_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), x_1(t)/sin(x_3(t)), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_3) + betas[4] * (x_1/np.sin(x_3)) + betas[5] * (np.sin(x_1))

def eq_14_2(X, betas, t):
    # dx_3/dt = [x_1(t)*cos(x_2(t)), x_2(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_1*np.cos(x_2)) + betas[7] * (x_2) + betas[8] * (np.exp(x_1))

def system_14(X, betas, t):
    return np.array([eq_14_0(X, betas, t), eq_14_1(X, betas, t), eq_14_2(X, betas, t)])

def eq_15_0(X, betas, t):
    # dx_1/dt = [x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2)

def eq_15_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_3(t), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1/x_3) + betas[2] * (np.cos(x_3))

def eq_15_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), x_2(t)*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_1)) + betas[4] * (x_2*np.cos(x_1))

def system_15(X, betas, t):
    return np.array([eq_15_0(X, betas, t), eq_15_1(X, betas, t), eq_15_2(X, betas, t)])

def eq_16_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t)), x_3(t), x_2(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)) + betas[1] * (x_3) + betas[2] * (x_2*np.exp(x_1))

def eq_16_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), cos(x_2(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)) + betas[4] * (np.cos(x_2)) + betas[5] * (np.exp(x_3))

def eq_16_2(X, betas, t):
    # dx_3/dt = [cos(x_1(t)), x_2(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.cos(x_1)) + betas[7] * (x_2) + betas[8] * (np.exp(x_2))

def system_16(X, betas, t):
    return np.array([eq_16_0(X, betas, t), eq_16_1(X, betas, t), eq_16_2(X, betas, t)])

def eq_17_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_1*np.sin(x_3))

def eq_17_1(X, betas, t):
    # dx_2/dt = [sin(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_3)) + betas[3] * (x_2)

def eq_17_2(X, betas, t):
    # dx_3/dt = [x_3(t)*cos(x_2(t)), exp(x_1(t))*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3*np.cos(x_2)) + betas[5] * (np.exp(x_1)*np.sin(x_3))

def system_17(X, betas, t):
    return np.array([eq_17_0(X, betas, t), eq_17_1(X, betas, t), eq_17_2(X, betas, t)])

def eq_18_0(X, betas, t):
    # dx_1/dt = [x_1(t), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.exp(x_3))

def eq_18_1(X, betas, t):
    # dx_2/dt = [cos(x_2(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_2)) + betas[3] * (x_1*x_3)

def eq_18_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)) + betas[5] * (x_2)

def system_18(X, betas, t):
    return np.array([eq_18_0(X, betas, t), eq_18_1(X, betas, t), eq_18_2(X, betas, t)])

def eq_19_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))*sin(x_1(t)), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)*np.sin(x_1)) + betas[1] * (np.cos(x_3))

def eq_19_1(X, betas, t):
    # dx_2/dt = [x_3(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3*np.sin(x_1))

def eq_19_2(X, betas, t):
    # dx_3/dt = [x_2(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2) + betas[4] * (x_3)

def system_19(X, betas, t):
    return np.array([eq_19_0(X, betas, t), eq_19_1(X, betas, t), eq_19_2(X, betas, t)])

def eq_20_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)) + betas[1] * (x_2)

def eq_20_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*x_3) + betas[3] * (x_3)

def eq_20_2(X, betas, t):
    # dx_3/dt = [x_2(t), cos(x_1(t)), x_3(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_2) + betas[5] * (np.cos(x_1)) + betas[6] * (x_3*np.exp(x_2))

def system_20(X, betas, t):
    return np.array([eq_20_0(X, betas, t), eq_20_1(X, betas, t), eq_20_2(X, betas, t)])

def eq_21_0(X, betas, t):
    # dx_1/dt = [cos(x_2(t)), x_1(t), x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_2)) + betas[1] * (x_1) + betas[2] * (x_1*x_2)

def eq_21_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_2))

def eq_21_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), exp(x_3(t))*sin(x_2(t)), x_1(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_1)) + betas[5] * (np.exp(x_3)*np.sin(x_2)) + betas[6] * (x_1*np.cos(x_3))

def system_21(X, betas, t):
    return np.array([eq_21_0(X, betas, t), eq_21_1(X, betas, t), eq_21_2(X, betas, t)])

def eq_22_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)) + betas[1] * (x_1*x_3)

def eq_22_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (x_1/x_3)

def eq_22_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t)), exp(x_1(t)), sin(x_2(t))*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_3)) + betas[5] * (np.exp(x_1)) + betas[6] * (np.sin(x_2)*np.cos(x_1))

def system_22(X, betas, t):
    return np.array([eq_22_0(X, betas, t), eq_22_1(X, betas, t), eq_22_2(X, betas, t)])

def eq_23_0(X, betas, t):
    # dx_1/dt = [x_1(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*np.cos(x_3))

def eq_23_1(X, betas, t):
    # dx_2/dt = [x_3(t)/x_2(t), x_1(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (x_3/x_2) + betas[2] * (x_1/x_2)

def eq_23_2(X, betas, t):
    # dx_3/dt = [x_1(t)*cos(x_2(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.cos(x_2)) + betas[4] * (x_1*x_3)

def system_23(X, betas, t):
    return np.array([eq_23_0(X, betas, t), eq_23_1(X, betas, t), eq_23_2(X, betas, t)])

def eq_24_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_1(t)), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_1)) + betas[2] * (np.sin(x_2))

def eq_24_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*exp(x_3(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)*np.exp(x_3)) + betas[4] * (np.exp(x_3))

def eq_24_2(X, betas, t):
    # dx_3/dt = [x_3(t)*exp(x_2(t)), x_3(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3*np.exp(x_2)) + betas[6] * (x_3) + betas[7] * (np.sin(x_1))

def system_24(X, betas, t):
    return np.array([eq_24_0(X, betas, t), eq_24_1(X, betas, t), eq_24_2(X, betas, t)])

def eq_25_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t)), x_3(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)) + betas[1] * (x_3/x_2)

def eq_25_1(X, betas, t):
    # dx_2/dt = [x_3(t)*cos(x_1(t)), x_1(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3*np.cos(x_1)) + betas[3] * (x_1) + betas[4] * (np.exp(x_2))

def eq_25_2(X, betas, t):
    # dx_3/dt = [x_1(t)*exp(-x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*np.exp(-x_2)) + betas[6] * (x_1)

def system_25(X, betas, t):
    return np.array([eq_25_0(X, betas, t), eq_25_1(X, betas, t), eq_25_2(X, betas, t)])

def eq_26_0(X, betas, t):
    # dx_1/dt = [sin(x_2(t)), x_2(t), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_2)) + betas[1] * (x_2) + betas[2] * (np.cos(x_2))

def eq_26_1(X, betas, t):
    # dx_2/dt = [cos(x_2(t))/sin(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_2)/np.sin(x_3)) + betas[4] * (x_2)

def eq_26_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_3)) + betas[6] * (x_3)

def system_26(X, betas, t):
    return np.array([eq_26_0(X, betas, t), eq_26_1(X, betas, t), eq_26_2(X, betas, t)])

def eq_27_0(X, betas, t):
    # dx_1/dt = [x_2(t)*sin(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.sin(x_1)) + betas[1] * (x_3)

def eq_27_1(X, betas, t):
    # dx_2/dt = [cos(x_3(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_3)) + betas[3] * (np.exp(x_3))

def eq_27_2(X, betas, t):
    # dx_3/dt = [x_1(t)*exp(x_2(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1*np.exp(x_2)) + betas[5] * (np.cos(x_1))

def system_27(X, betas, t):
    return np.array([eq_27_0(X, betas, t), eq_27_1(X, betas, t), eq_27_2(X, betas, t)])

def eq_28_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(x_1(t)), sin(x_3(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(x_1)) + betas[1] * (np.sin(x_3)) + betas[2] * (np.exp(x_3))

def eq_28_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t))*cos(x_2(t)), x_2(t)*cos(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_1)*np.cos(x_2)) + betas[4] * (x_2*np.cos(x_1)) + betas[5] * (x_3)

def eq_28_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.exp(x_1))

def system_28(X, betas, t):
    return np.array([eq_28_0(X, betas, t), eq_28_1(X, betas, t), eq_28_2(X, betas, t)])

def eq_29_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t))/x_3(t), x_1(t)/x_3(t), exp(x_2(t))*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)/x_3) + betas[1] * (x_1/x_3) + betas[2] * (np.exp(x_2)*np.cos(x_1))

def eq_29_1(X, betas, t):
    # dx_2/dt = [x_1(t), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1) + betas[4] * (np.cos(x_2))

def eq_29_2(X, betas, t):
    # dx_3/dt = [x_1(t)*exp(-x_2(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*np.exp(-x_2)) + betas[6] * (np.cos(x_1))

def system_29(X, betas, t):
    return np.array([eq_29_0(X, betas, t), eq_29_1(X, betas, t), eq_29_2(X, betas, t)])

def eq_30_0(X, betas, t):
    # dx_1/dt = [x_3(t), x_1(t)/x_2(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3) + betas[1] * (x_1/x_2) + betas[2] * (x_1)

def eq_30_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_1(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2) + betas[4] * (x_1*np.sin(x_2))

def eq_30_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), sin(x_1(t))*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_3)) + betas[6] * (np.sin(x_1)*np.cos(x_2))

def system_30(X, betas, t):
    return np.array([eq_30_0(X, betas, t), eq_30_1(X, betas, t), eq_30_2(X, betas, t)])

def eq_31_0(X, betas, t):
    # dx_1/dt = [x_3(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3) + betas[1] * (np.cos(x_1))

def eq_31_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1)) + betas[3] * (np.cos(x_2))

def eq_31_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)) + betas[5] * (x_2)

def system_31(X, betas, t):
    return np.array([eq_31_0(X, betas, t), eq_31_1(X, betas, t), eq_31_2(X, betas, t)])

def eq_32_0(X, betas, t):
    # dx_1/dt = [x_1(t), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.exp(x_3))

def eq_32_1(X, betas, t):
    # dx_2/dt = [x_2(t), exp(x_1(t)), x_1(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2) + betas[3] * (np.exp(x_1)) + betas[4] * (x_1*np.sin(x_2))

def eq_32_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.exp(x_3))

def system_32(X, betas, t):
    return np.array([eq_32_0(X, betas, t), eq_32_1(X, betas, t), eq_32_2(X, betas, t)])

def eq_33_0(X, betas, t):
    # dx_1/dt = [x_3(t), exp(x_2(t))*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3) + betas[1] * (np.exp(x_2)*np.sin(x_1))

def eq_33_1(X, betas, t):
    # dx_2/dt = [x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3) + betas[3] * (x_1)

def eq_33_2(X, betas, t):
    # dx_3/dt = [x_3(t), exp(x_2(t)), sin(x_1(t))*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3) + betas[5] * (np.exp(x_2)) + betas[6] * (np.sin(x_1)*np.cos(x_2))

def system_33(X, betas, t):
    return np.array([eq_33_0(X, betas, t), eq_33_1(X, betas, t), eq_33_2(X, betas, t)])

def eq_34_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t))/x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)/x_3) + betas[1] * (x_1)

def eq_34_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t)), exp(x_1(t)), x_1(t)/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_1)) + betas[3] * (np.exp(x_1)) + betas[4] * (x_1/np.cos(x_3))

def eq_34_2(X, betas, t):
    # dx_3/dt = [x_3(t), sin(x_3(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3) + betas[6] * (np.sin(x_3)) + betas[7] * (np.cos(x_1))

def system_34(X, betas, t):
    return np.array([eq_34_0(X, betas, t), eq_34_1(X, betas, t), eq_34_2(X, betas, t)])

def eq_35_0(X, betas, t):
    # dx_1/dt = [x_1(t), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.exp(x_3))

def eq_35_1(X, betas, t):
    # dx_2/dt = [x_3(t), x_1(t), x_3(t)*exp(-x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3) + betas[3] * (x_1) + betas[4] * (x_3*np.exp(-x_1))

def eq_35_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), exp(-x_2(t))*cos(x_3(t)), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_1)) + betas[6] * (np.exp(-x_2)*np.cos(x_3)) + betas[7] * (np.sin(x_2))

def system_35(X, betas, t):
    return np.array([eq_35_0(X, betas, t), eq_35_1(X, betas, t), eq_35_2(X, betas, t)])

def eq_36_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), sin(x_3(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (np.sin(x_3)) + betas[2] * (np.cos(x_1))

def eq_36_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), x_1(t)*cos(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)) + betas[4] * (x_1*np.cos(x_3)) + betas[5] * (x_1)

def eq_36_2(X, betas, t):
    # dx_3/dt = [x_2(t), x_1(t)*x_3(t), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_2) + betas[7] * (x_1*x_3) + betas[8] * (x_1*np.sin(x_3))

def system_36(X, betas, t):
    return np.array([eq_36_0(X, betas, t), eq_36_1(X, betas, t), eq_36_2(X, betas, t)])

def eq_37_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)) + betas[1] * (x_2)

def eq_37_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_2)) + betas[3] * (x_1)

def eq_37_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_3(t), x_3(t)*exp(x_2(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1*x_3) + betas[5] * (x_3*np.exp(x_2)) + betas[6] * (np.cos(x_1))

def system_37(X, betas, t):
    return np.array([eq_37_0(X, betas, t), eq_37_1(X, betas, t), eq_37_2(X, betas, t)])

def eq_38_0(X, betas, t):
    # dx_1/dt = [x_2(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2) + betas[1] * (np.sin(x_1))

def eq_38_1(X, betas, t):
    # dx_2/dt = [x_2(t), exp(x_1(t)), x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2) + betas[3] * (np.exp(x_1)) + betas[4] * (x_1*x_2)

def eq_38_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_3))

def system_38(X, betas, t):
    return np.array([eq_38_0(X, betas, t), eq_38_1(X, betas, t), eq_38_2(X, betas, t)])

def eq_39_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (np.cos(x_1))

def eq_39_1(X, betas, t):
    # dx_2/dt = [x_3(t), sin(x_2(t))/sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3) + betas[3] * (np.sin(x_2)/np.sin(x_3))

def eq_39_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_3(t)*cos(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3) + betas[5] * (x_3*np.cos(x_2)) + betas[6] * (x_1)

def system_39(X, betas, t):
    return np.array([eq_39_0(X, betas, t), eq_39_1(X, betas, t), eq_39_2(X, betas, t)])

def eq_40_0(X, betas, t):
    # dx_1/dt = [cos(x_3(t)), x_1(t), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_3)) + betas[1] * (x_1) + betas[2] * (np.exp(x_3))

def eq_40_1(X, betas, t):
    # dx_2/dt = [x_2(t)*cos(x_1(t)), x_3(t), sin(x_1(t))*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2*np.cos(x_1)) + betas[4] * (x_3) + betas[5] * (np.sin(x_1)*np.cos(x_2))

def eq_40_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_1*x_3)

def system_40(X, betas, t):
    return np.array([eq_40_0(X, betas, t), eq_40_1(X, betas, t), eq_40_2(X, betas, t)])

def eq_41_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(x_1)) + betas[1] * (x_3)

def eq_41_1(X, betas, t):
    # dx_2/dt = [x_1(t)*cos(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*np.cos(x_3)) + betas[3] * (x_1)

def eq_41_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_2(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3) + betas[5] * (x_2) + betas[6] * (np.exp(x_2))

def system_41(X, betas, t):
    return np.array([eq_41_0(X, betas, t), eq_41_1(X, betas, t), eq_41_2(X, betas, t)])

def eq_42_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_3(t), exp(x_2(t))*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2/x_3) + betas[1] * (np.exp(x_2)*np.sin(x_1))

def eq_42_1(X, betas, t):
    # dx_2/dt = [x_2(t), exp(x_1(t))*cos(x_2(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2) + betas[3] * (np.exp(x_1)*np.cos(x_2)) + betas[4] * (np.exp(x_1))

def eq_42_2(X, betas, t):
    # dx_3/dt = [x_1(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*np.sin(x_2))

def system_42(X, betas, t):
    return np.array([eq_42_0(X, betas, t), eq_42_1(X, betas, t), eq_42_2(X, betas, t)])

def eq_43_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(-x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(-x_1)) + betas[1] * (x_1)

def eq_43_1(X, betas, t):
    # dx_2/dt = [x_3(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3) + betas[3] * (x_1*x_3)

def eq_43_2(X, betas, t):
    # dx_3/dt = [x_3(t)*cos(x_2(t)), x_2(t)*cos(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3*np.cos(x_2)) + betas[5] * (x_2*np.cos(x_3)) + betas[6] * (x_1)

def system_43(X, betas, t):
    return np.array([eq_43_0(X, betas, t), eq_43_1(X, betas, t), eq_43_2(X, betas, t)])

def eq_44_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3)

def eq_44_1(X, betas, t):
    # dx_2/dt = [x_3(t), sin(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (x_3) + betas[2] * (np.sin(x_3)) + betas[3] * (x_1)

def eq_44_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.cos(x_3)) + betas[5] * (x_3)

def system_44(X, betas, t):
    return np.array([eq_44_0(X, betas, t), eq_44_1(X, betas, t), eq_44_2(X, betas, t)])

def eq_45_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (x_1)

def eq_45_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1))

def eq_45_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t))/cos(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_3)/np.cos(x_2)) + betas[4] * (x_1)

def system_45(X, betas, t):
    return np.array([eq_45_0(X, betas, t), eq_45_1(X, betas, t), eq_45_2(X, betas, t)])

def eq_46_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_1)

def eq_46_1(X, betas, t):
    # dx_2/dt = [cos(x_3(t)), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_3)) + betas[3] * (x_1/x_3)

def eq_46_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)) + betas[5] * (x_1*np.sin(x_3))

def system_46(X, betas, t):
    return np.array([eq_46_0(X, betas, t), eq_46_1(X, betas, t), eq_46_2(X, betas, t)])

def eq_47_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t)), x_1(t)*x_3(t), cos(x_2(t))/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)) + betas[1] * (x_1*x_3) + betas[2] * (np.cos(x_2)/np.cos(x_3))

def eq_47_1(X, betas, t):
    # dx_2/dt = [x_1(t)*exp(-x_2(t)), x_1(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.exp(-x_2)) + betas[4] * (x_1*np.cos(x_3))

def eq_47_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), sin(x_3(t)), x_2(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.exp(x_1)) + betas[6] * (np.sin(x_3)) + betas[7] * (x_2*np.sin(x_1))

def system_47(X, betas, t):
    return np.array([eq_47_0(X, betas, t), eq_47_1(X, betas, t), eq_47_2(X, betas, t)])

def eq_48_0(X, betas, t):
    # dx_1/dt = [cos(x_2(t))/cos(x_3(t)), x_1(t)*x_3(t), x_2(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_2)/np.cos(x_3)) + betas[1] * (x_1*x_3) + betas[2] * (x_2/x_3)

def eq_48_1(X, betas, t):
    # dx_2/dt = [x_1(t)*exp(-x_2(t)), x_1(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.exp(-x_2)) + betas[4] * (x_1*np.cos(x_3))

def eq_48_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), x_1(t)*cos(x_3(t)), x_2(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_1)) + betas[6] * (x_1*np.cos(x_3)) + betas[7] * (x_2*np.sin(x_1))

def system_48(X, betas, t):
    return np.array([eq_48_0(X, betas, t), eq_48_1(X, betas, t), eq_48_2(X, betas, t)])

def eq_49_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)/x_3)

def eq_49_1(X, betas, t):
    # dx_2/dt = [cos(x_3(t)), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (np.cos(x_3)) + betas[2] * (x_1/x_3)

def eq_49_2(X, betas, t):
    # dx_3/dt = [x_2(t)*cos(x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2*np.cos(x_1)) + betas[4] * (x_1)

def system_49(X, betas, t):
    return np.array([eq_49_0(X, betas, t), eq_49_1(X, betas, t), eq_49_2(X, betas, t)])

def eq_50_0(X, betas, t):
    # dx_1/dt = [x_3(t), x_2(t)*exp(x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3) + betas[1] * (x_2*np.exp(x_1)) + betas[2] * (x_1)

def eq_50_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), cos(x_2(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)) + betas[4] * (np.cos(x_2)) + betas[5] * (np.exp(x_3))

def eq_50_2(X, betas, t):
    # dx_3/dt = [x_2(t), exp(x_2(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_2) + betas[7] * (np.exp(x_2)) + betas[8] * (np.cos(x_1))

def system_50(X, betas, t):
    return np.array([eq_50_0(X, betas, t), eq_50_1(X, betas, t), eq_50_2(X, betas, t)])

def eq_51_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_2(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_2*np.sin(x_1))

def eq_51_1(X, betas, t):
    # dx_2/dt = [sin(x_2(t))/x_3(t), sin(x_1(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_2)/x_3) + betas[3] * (np.sin(x_1)/x_3)

def eq_51_2(X, betas, t):
    # dx_3/dt = [x_2(t), cos(x_2(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_2) + betas[5] * (np.cos(x_2)) + betas[6] * (np.exp(x_3))

def system_51(X, betas, t):
    return np.array([eq_51_0(X, betas, t), eq_51_1(X, betas, t), eq_51_2(X, betas, t)])

def eq_52_0(X, betas, t):
    # dx_1/dt = [x_1(t)*exp(-x_3(t)), x_2(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*np.exp(-x_3)) + betas[1] * (x_2*np.sin(x_1))

def eq_52_1(X, betas, t):
    # dx_2/dt = [x_3(t), sin(x_1(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3) + betas[3] * (np.sin(x_1)/x_3)

def eq_52_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_2(t), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3) + betas[5] * (x_2) + betas[6] * (np.exp(x_3))

def system_52(X, betas, t):
    return np.array([eq_52_0(X, betas, t), eq_52_1(X, betas, t), eq_52_2(X, betas, t)])

def eq_53_0(X, betas, t):
    # dx_1/dt = [cos(x_3(t)), exp(x_3(t))*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_3)) + betas[1] * (np.exp(x_3)*np.sin(x_1))

def eq_53_1(X, betas, t):
    # dx_2/dt = [x_3(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3*np.sin(x_1))

def eq_53_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_3)) + betas[4] * (np.cos(x_2))

def system_53(X, betas, t):
    return np.array([eq_53_0(X, betas, t), eq_53_1(X, betas, t), eq_53_2(X, betas, t)])

def eq_54_0(X, betas, t):
    # dx_1/dt = [x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3) + betas[1] * (x_1)

def eq_54_1(X, betas, t):
    # dx_2/dt = [x_2(t), exp(x_1(t))*cos(x_2(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2) + betas[3] * (np.exp(x_1)*np.cos(x_2)) + betas[4] * (np.exp(x_1))

def eq_54_2(X, betas, t):
    # dx_3/dt = [x_1(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*np.sin(x_2))

def system_54(X, betas, t):
    return np.array([eq_54_0(X, betas, t), eq_54_1(X, betas, t), eq_54_2(X, betas, t)])

def eq_55_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_3(t), sin(x_1(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1/x_3) + betas[1] * (np.sin(x_1)/x_3)

def eq_55_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t)), exp(x_1(t)), x_1(t)/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_1)) + betas[3] * (np.exp(x_1)) + betas[4] * (x_1/np.cos(x_3))

def eq_55_2(X, betas, t):
    # dx_3/dt = [x_3(t), sin(x_3(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3) + betas[6] * (np.sin(x_3)) + betas[7] * (np.cos(x_1))

def system_55(X, betas, t):
    return np.array([eq_55_0(X, betas, t), eq_55_1(X, betas, t), eq_55_2(X, betas, t)])

def eq_56_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(x_1)) + betas[1] * (x_3)

def eq_56_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*cos(x_2(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1)*np.cos(x_2)) + betas[3] * (np.exp(x_1))

def eq_56_2(X, betas, t):
    # dx_3/dt = [x_3(t), exp(x_2(t)), x_1(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3) + betas[5] * (np.exp(x_2)) + betas[6] * (x_1*np.sin(x_2))

def system_56(X, betas, t):
    return np.array([eq_56_0(X, betas, t), eq_56_1(X, betas, t), eq_56_2(X, betas, t)])

def eq_57_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_2))

def eq_57_1(X, betas, t):
    # dx_2/dt = [x_3(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3) + betas[3] * (np.exp(x_2))

def eq_57_2(X, betas, t):
    # dx_3/dt = [x_3(t)*exp(x_2(t)), exp(x_1(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3*np.exp(x_2)) + betas[5] * (np.exp(x_1)) + betas[6] * (np.cos(x_1))

def system_57(X, betas, t):
    return np.array([eq_57_0(X, betas, t), eq_57_1(X, betas, t), eq_57_2(X, betas, t)])

def eq_58_0(X, betas, t):
    # dx_1/dt = [cos(x_2(t))/cos(x_3(t)), cos(x_1(t))/x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_2)/np.cos(x_3)) + betas[1] * (np.cos(x_1)/x_3) + betas[2] * (x_1)

def eq_58_1(X, betas, t):
    # dx_2/dt = [x_1(t)*exp(-x_2(t)), x_1(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.exp(-x_2)) + betas[4] * (x_1*np.cos(x_3))

def eq_58_2(X, betas, t):
    # dx_3/dt = [exp(x_2(t)), sin(x_1(t))*cos(x_2(t)), x_2(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.exp(x_2)) + betas[6] * (np.sin(x_1)*np.cos(x_2)) + betas[7] * (x_2*np.sin(x_1))

def system_58(X, betas, t):
    return np.array([eq_58_0(X, betas, t), eq_58_1(X, betas, t), eq_58_2(X, betas, t)])

def eq_59_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (x_1)

def eq_59_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_2)) + betas[3] * (x_1)

def eq_59_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), sin(x_3(t)), sin(x_2(t))*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_1)) + betas[5] * (np.sin(x_3)) + betas[6] * (np.sin(x_2)*np.cos(x_1))

def system_59(X, betas, t):
    return np.array([eq_59_0(X, betas, t), eq_59_1(X, betas, t), eq_59_2(X, betas, t)])

def eq_60_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), x_1(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (x_1) + betas[2] * (np.sin(x_3))

def eq_60_1(X, betas, t):
    # dx_2/dt = [x_3(t), exp(x_1(t))*exp(x_2(t)), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3) + betas[4] * (np.exp(x_1)*np.exp(x_2)) + betas[5] * (np.exp(x_2))

def eq_60_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_3) + betas[7] * (x_1)

def system_60(X, betas, t):
    return np.array([eq_60_0(X, betas, t), eq_60_1(X, betas, t), eq_60_2(X, betas, t)])

def eq_61_0(X, betas, t):
    # dx_1/dt = [x_3(t)*exp(-x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.exp(-x_1)) + betas[1] * (x_3)

def eq_61_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1)) + betas[3] * (x_3)

def eq_61_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), x_1(t)*x_3(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (x_1*x_3) + betas[6] * (x_3)

def system_61(X, betas, t):
    return np.array([eq_61_0(X, betas, t), eq_61_1(X, betas, t), eq_61_2(X, betas, t)])

def eq_62_0(X, betas, t):
    # dx_1/dt = [sin(x_3(t)), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_3)) + betas[1] * (x_1/x_3)

def eq_62_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), cos(x_2(t)), x_1(t)/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1)) + betas[3] * (np.cos(x_2)) + betas[4] * (x_1/np.cos(x_3))

def eq_62_2(X, betas, t):
    # dx_3/dt = [cos(x_1(t)), x_3(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_1)) + betas[6] * (x_3) + betas[7] * (np.exp(x_2))

def system_62(X, betas, t):
    return np.array([eq_62_0(X, betas, t), eq_62_1(X, betas, t), eq_62_2(X, betas, t)])

def eq_63_0(X, betas, t):
    # dx_1/dt = [x_1(t), sin(x_2(t))/sin(x_1(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.sin(x_2)/np.sin(x_1)) + betas[2] * (np.exp(x_1))

def eq_63_1(X, betas, t):
    # dx_2/dt = [x_1(t)*sin(x_2(t)), x_2(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.sin(x_2)) + betas[4] * (x_2) + betas[5] * (x_1)

def eq_63_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.exp(x_3)) + betas[7] * (np.sin(x_3))

def system_63(X, betas, t):
    return np.array([eq_63_0(X, betas, t), eq_63_1(X, betas, t), eq_63_2(X, betas, t)])

def eq_64_0(X, betas, t):
    # dx_1/dt = [x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1)

def eq_64_1(X, betas, t):
    # dx_2/dt = [x_3(t)/x_1(t), x_2(t), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_3/x_1) + betas[2] * (x_2) + betas[3] * (x_3*np.sin(x_2))

def eq_64_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), cos(x_3(t))/sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (np.cos(x_3)/np.sin(x_1))

def system_64(X, betas, t):
    return np.array([eq_64_0(X, betas, t), eq_64_1(X, betas, t), eq_64_2(X, betas, t)])

def eq_65_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)) + betas[1] * (x_1)

def eq_65_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*x_3) + betas[3] * (np.cos(x_3))

def eq_65_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), sin(x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_1)) + betas[5] * (np.sin(x_3)) + betas[6] * (x_3)

def system_65(X, betas, t):
    return np.array([eq_65_0(X, betas, t), eq_65_1(X, betas, t), eq_65_2(X, betas, t)])

def eq_66_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(x_1(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(x_1)) + betas[1] * (np.sin(x_3))

def eq_66_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2) + betas[3] * (x_3)

def eq_66_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), x_2(t)*exp(-x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (x_2*np.exp(-x_3)) + betas[6] * (x_3)

def system_66(X, betas, t):
    return np.array([eq_66_0(X, betas, t), eq_66_1(X, betas, t), eq_66_2(X, betas, t)])

def eq_67_0(X, betas, t):
    # dx_1/dt = [x_2(t), sin(x_1(t)), x_1(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2) + betas[1] * (np.sin(x_1)) + betas[2] * (x_1*np.sin(x_2))

def eq_67_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_3(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_2) + betas[4] * (x_3) + betas[5] * (np.exp(x_1))

def eq_67_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), x_1(t)*x_3(t), x_3(t)*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.cos(x_3)) + betas[7] * (x_1*x_3) + betas[8] * (x_3*np.cos(x_2))

def system_67(X, betas, t):
    return np.array([eq_67_0(X, betas, t), eq_67_1(X, betas, t), eq_67_2(X, betas, t)])

def eq_68_0(X, betas, t):
    # dx_1/dt = [x_1(t), sin(x_3(t)), exp(x_1(t))*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.sin(x_3)) + betas[2] * (np.exp(x_1)*np.sin(x_2))

def eq_68_1(X, betas, t):
    # dx_2/dt = [x_1(t), exp(x_2(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1) + betas[4] * (np.exp(x_2)) + betas[5] * (x_2)

def eq_68_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_3(t), x_1(t), x_3(t)/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_1*x_3) + betas[7] * (x_1) + betas[8] * (x_3/x_1)

def system_68(X, betas, t):
    return np.array([eq_68_0(X, betas, t), eq_68_1(X, betas, t), eq_68_2(X, betas, t)])

def eq_69_0(X, betas, t):
    # dx_1/dt = [x_1(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.sin(x_3))

def eq_69_1(X, betas, t):
    # dx_2/dt = [sin(x_3(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_3)) + betas[3] * (x_1*x_3)

def eq_69_2(X, betas, t):
    # dx_3/dt = [x_3(t)*cos(x_2(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3*np.cos(x_2)) + betas[5] * (x_2)

def system_69(X, betas, t):
    return np.array([eq_69_0(X, betas, t), eq_69_1(X, betas, t), eq_69_2(X, betas, t)])

def eq_70_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t))*sin(x_1(t)), cos(x_2(t))/sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)*np.sin(x_1)) + betas[1] * (np.cos(x_2)/np.sin(x_1))

def eq_70_1(X, betas, t):
    # dx_2/dt = [x_3(t)/x_2(t), sin(x_2(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3/x_2) + betas[3] * (np.sin(x_2)/x_3)

def eq_70_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), exp(x_3(t)), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_1)) + betas[5] * (np.exp(x_3)) + betas[6] * (x_1/x_3)

def system_70(X, betas, t):
    return np.array([eq_70_0(X, betas, t), eq_70_1(X, betas, t), eq_70_2(X, betas, t)])

def eq_71_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_1(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_1)/x_3)

def eq_71_1(X, betas, t):
    # dx_2/dt = [x_1(t)*exp(-x_2(t)), x_2(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*np.exp(-x_2)) + betas[3] * (x_2*x_3)

def eq_71_2(X, betas, t):
    # dx_3/dt = [x_1(t)*cos(x_3(t)), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1*np.cos(x_3)) + betas[5] * (np.sin(x_1))

def system_71(X, betas, t):
    return np.array([eq_71_0(X, betas, t), eq_71_1(X, betas, t), eq_71_2(X, betas, t)])

def eq_72_0(X, betas, t):
    # dx_1/dt = [x_1(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.exp(x_2))

def eq_72_1(X, betas, t):
    # dx_2/dt = [exp(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_3)) + betas[3] * (x_1)

def eq_72_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t)), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_3)) + betas[5] * (x_1*np.sin(x_3))

def system_72(X, betas, t):
    return np.array([eq_72_0(X, betas, t), eq_72_1(X, betas, t), eq_72_2(X, betas, t)])

def eq_73_0(X, betas, t):
    # dx_1/dt = [x_1(t), sin(x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.sin(x_3)) + betas[2] * (x_3)

def eq_73_1(X, betas, t):
    # dx_2/dt = [cos(x_2(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_2)) + betas[4] * (np.exp(x_3))

def eq_73_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_2(t), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3) + betas[6] * (x_2) + betas[7] * (np.sin(x_2))

def system_73(X, betas, t):
    return np.array([eq_73_0(X, betas, t), eq_73_1(X, betas, t), eq_73_2(X, betas, t)])

def eq_74_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_3)

def eq_74_1(X, betas, t):
    # dx_2/dt = [x_1(t), exp(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (np.exp(x_2)) + betas[4] * (x_3)

def eq_74_2(X, betas, t):
    # dx_3/dt = [x_3(t), cos(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3) + betas[6] * (np.cos(x_3)) + betas[7] * (x_1)

def system_74(X, betas, t):
    return np.array([eq_74_0(X, betas, t), eq_74_1(X, betas, t), eq_74_2(X, betas, t)])

def eq_75_0(X, betas, t):
    # dx_1/dt = [sin(x_2(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_2)) + betas[1] * (np.exp(x_3))

def eq_75_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_3(t), x_3(t)/cos(x_2(t)), x_1(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1/x_3) + betas[3] * (x_3/np.cos(x_2)) + betas[4] * (x_1*np.sin(x_2))

def eq_75_2(X, betas, t):
    # dx_3/dt = [x_2(t)*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_2*np.cos(x_1))

def system_75(X, betas, t):
    return np.array([eq_75_0(X, betas, t), eq_75_1(X, betas, t), eq_75_2(X, betas, t)])

def eq_76_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (np.cos(x_1))

def eq_76_1(X, betas, t):
    # dx_2/dt = [cos(x_2(t)), exp(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_2)) + betas[3] * (np.exp(x_1)) + betas[4] * (x_2)

def eq_76_2(X, betas, t):
    # dx_3/dt = [exp(x_2(t)), x_2(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.exp(x_2)) + betas[6] * (x_2*np.exp(x_1))

def system_76(X, betas, t):
    return np.array([eq_76_0(X, betas, t), eq_76_1(X, betas, t), eq_76_2(X, betas, t)])

def eq_77_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), x_3(t)*cos(x_1(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (x_3*np.cos(x_1)) + betas[2] * (np.sin(x_3))

def eq_77_1(X, betas, t):
    # dx_2/dt = [x_3(t), exp(x_1(t)), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3) + betas[4] * (np.exp(x_1)) + betas[5] * (np.sin(x_2))

def eq_77_2(X, betas, t):
    # dx_3/dt = [x_3(t), sin(x_3(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_3) + betas[7] * (np.sin(x_3)) + betas[8] * (x_1*x_3)

def system_77(X, betas, t):
    return np.array([eq_77_0(X, betas, t), eq_77_1(X, betas, t), eq_77_2(X, betas, t)])

def eq_78_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)*exp(x_2(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1*np.exp(x_2)) + betas[2] * (np.cos(x_1))

def eq_78_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t))/cos(x_1(t)), x_2(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_2)/np.cos(x_1)) + betas[4] * (x_2*np.sin(x_3))

def eq_78_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_3))

def system_78(X, betas, t):
    return np.array([eq_78_0(X, betas, t), eq_78_1(X, betas, t), eq_78_2(X, betas, t)])

def eq_79_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t)), x_1(t)*x_3(t), x_2(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)) + betas[1] * (x_1*x_3) + betas[2] * (x_2*np.exp(x_1))

def eq_79_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)) + betas[4] * (np.exp(x_3))

def eq_79_2(X, betas, t):
    # dx_3/dt = [x_2(t), exp(x_2(t)), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_2) + betas[6] * (np.exp(x_2)) + betas[7] * (np.sin(x_2))

def system_79(X, betas, t):
    return np.array([eq_79_0(X, betas, t), eq_79_1(X, betas, t), eq_79_2(X, betas, t)])

def eq_80_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3))

def eq_80_1(X, betas, t):
    # dx_2/dt = [x_3(t), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_3) + betas[2] * (np.cos(x_3))

def eq_80_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), x_3(t)*exp(x_1(t)), x_3(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_1)) + betas[4] * (x_3*np.exp(x_1)) + betas[5] * (x_3*np.exp(x_2))

def system_80(X, betas, t):
    return np.array([eq_80_0(X, betas, t), eq_80_1(X, betas, t), eq_80_2(X, betas, t)])

def eq_81_0(X, betas, t):
    # dx_1/dt = [cos(x_3(t)), x_1(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_3)) + betas[1] * (x_1) + betas[2] * (x_1*x_3)

def eq_81_1(X, betas, t):
    # dx_2/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3)

def eq_81_2(X, betas, t):
    # dx_3/dt = [x_2(t), sin(x_3(t))/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_2) + betas[5] * (np.sin(x_3)/np.cos(x_2))

def system_81(X, betas, t):
    return np.array([eq_81_0(X, betas, t), eq_81_1(X, betas, t), eq_81_2(X, betas, t)])

def eq_82_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))/x_3(t), sin(x_2(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)/x_3) + betas[1] * (np.sin(x_2)) + betas[2] * (x_1*x_3)

def eq_82_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_1))

def eq_82_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))/x_3(t), sin(x_3(t))/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)/x_3) + betas[5] * (np.sin(x_3)/np.cos(x_2))

def system_82(X, betas, t):
    return np.array([eq_82_0(X, betas, t), eq_82_1(X, betas, t), eq_82_2(X, betas, t)])

def eq_83_0(X, betas, t):
    # dx_1/dt = [x_1(t), exp(-x_2(t))*exp(x_3(t)), cos(x_2(t))/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.exp(-x_2)*np.exp(x_3)) + betas[2] * (np.cos(x_2)/np.cos(x_3))

def eq_83_1(X, betas, t):
    # dx_2/dt = [x_1(t)*exp(-x_2(t)), x_2(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.exp(-x_2)) + betas[4] * (x_2*x_3)

def eq_83_2(X, betas, t):
    # dx_3/dt = [x_1(t)*cos(x_3(t)), exp(x_2(t))*cos(x_3(t)), x_2(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*np.cos(x_3)) + betas[6] * (np.exp(x_2)*np.cos(x_3)) + betas[7] * (x_2*np.sin(x_1))

def system_83(X, betas, t):
    return np.array([eq_83_0(X, betas, t), eq_83_1(X, betas, t), eq_83_2(X, betas, t)])

def eq_84_0(X, betas, t):
    # dx_1/dt = [x_1(t), exp(x_1(t))/x_3(t), exp(x_2(t))*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.exp(x_1)/x_3) + betas[2] * (np.exp(x_2)*np.sin(x_1))

def eq_84_1(X, betas, t):
    # dx_2/dt = [x_1(t)*sin(x_2(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.sin(x_2)) + betas[4] * (x_2)

def eq_84_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_1)*np.cos(x_2)) + betas[6] * (x_2)

def system_84(X, betas, t):
    return np.array([eq_84_0(X, betas, t), eq_84_1(X, betas, t), eq_84_2(X, betas, t)])

def eq_85_0(X, betas, t):
    # dx_1/dt = [x_3(t), exp(-x_3(t))*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3) + betas[1] * (np.exp(-x_3)*np.sin(x_1))

def eq_85_1(X, betas, t):
    # dx_2/dt = [x_1(t)*sin(x_2(t)), x_2(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*np.sin(x_2)) + betas[3] * (x_2) + betas[4] * (np.sin(x_3))

def eq_85_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t))/cos(x_2(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_3)/np.cos(x_2)) + betas[6] * (np.sin(x_3))

def system_85(X, betas, t):
    return np.array([eq_85_0(X, betas, t), eq_85_1(X, betas, t), eq_85_2(X, betas, t)])

def eq_86_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t)), x_1(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)) + betas[1] * (x_1) + betas[2] * (x_1*x_3)

def eq_86_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_3) + betas[4] * (x_3)

def eq_86_2(X, betas, t):
    # dx_3/dt = [x_1(t), sin(x_3(t)), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1) + betas[6] * (np.sin(x_3)) + betas[7] * (x_1/x_3)

def system_86(X, betas, t):
    return np.array([eq_86_0(X, betas, t), eq_86_1(X, betas, t), eq_86_2(X, betas, t)])

def eq_87_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_1(t)), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_1)) + betas[2] * (np.sin(x_1))

def eq_87_1(X, betas, t):
    # dx_2/dt = [cos(x_1(t)), exp(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_1)) + betas[4] * (np.exp(x_1)) + betas[5] * (x_3)

def eq_87_2(X, betas, t):
    # dx_3/dt = [x_2(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_2) + betas[7] * (x_3)

def system_87(X, betas, t):
    return np.array([eq_87_0(X, betas, t), eq_87_1(X, betas, t), eq_87_2(X, betas, t)])

def eq_88_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t)), x_2(t)/x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)) + betas[1] * (x_2/x_3) + betas[2] * (x_1)

def eq_88_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*cos(x_2(t)), cos(x_1(t))/x_2(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)*np.cos(x_2)) + betas[4] * (np.cos(x_1)/x_2) + betas[5] * (x_2)

def eq_88_2(X, betas, t):
    # dx_3/dt = [x_2(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_2)

def system_88(X, betas, t):
    return np.array([eq_88_0(X, betas, t), eq_88_1(X, betas, t), eq_88_2(X, betas, t)])

def eq_89_0(X, betas, t):
    # dx_1/dt = [cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_3))

def eq_89_1(X, betas, t):
    # dx_2/dt = [x_1(t), exp(x_2(t)), x_3(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1) + betas[2] * (np.exp(x_2)) + betas[3] * (x_3*np.exp(x_1))

def eq_89_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_3(t), x_1(t)/sin(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1*x_3) + betas[5] * (x_1/np.sin(x_2)) + betas[6] * (x_1)

def system_89(X, betas, t):
    return np.array([eq_89_0(X, betas, t), eq_89_1(X, betas, t), eq_89_2(X, betas, t)])

def eq_90_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t)), exp(x_3(t))*cos(x_1(t)), x_2(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)) + betas[1] * (np.exp(x_3)*np.cos(x_1)) + betas[2] * (x_2*np.exp(x_1))

def eq_90_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), cos(x_2(t)), x_2(t)*exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)) + betas[4] * (np.cos(x_2)) + betas[5] * (x_2*np.exp(x_3))

def eq_90_2(X, betas, t):
    # dx_3/dt = [cos(x_1(t)), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.cos(x_1)) + betas[7] * (np.exp(x_2))

def system_90(X, betas, t):
    return np.array([eq_90_0(X, betas, t), eq_90_1(X, betas, t), eq_90_2(X, betas, t)])

def eq_91_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(x_1(t)), cos(x_1(t))/x_2(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(x_1)) + betas[1] * (np.cos(x_1)/x_2) + betas[2] * (np.exp(x_1))

def eq_91_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t))*cos(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_2)*np.cos(x_1)) + betas[4] * (x_3)

def eq_91_2(X, betas, t):
    # dx_3/dt = [exp(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.exp(x_2)) + betas[6] * (x_3)

def system_91(X, betas, t):
    return np.array([eq_91_0(X, betas, t), eq_91_1(X, betas, t), eq_91_2(X, betas, t)])

def eq_92_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t))*sin(x_1(t)), exp(x_3(t))/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)*np.sin(x_1)) + betas[1] * (np.exp(x_3)/x_1)

def eq_92_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*x_3) + betas[3] * (x_2)

def eq_92_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_1)) + betas[5] * (np.sin(x_3))

def system_92(X, betas, t):
    return np.array([eq_92_0(X, betas, t), eq_92_1(X, betas, t), eq_92_2(X, betas, t)])

def eq_93_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(x_1(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(x_1)) + betas[1] * (np.exp(x_3))

def eq_93_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t))*cos(x_2(t)), x_2(t)*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_1)*np.cos(x_2)) + betas[3] * (x_2*np.cos(x_1))

def eq_93_2(X, betas, t):
    # dx_3/dt = [x_2(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (x_2)

def system_93(X, betas, t):
    return np.array([eq_93_0(X, betas, t), eq_93_1(X, betas, t), eq_93_2(X, betas, t)])

def eq_94_0(X, betas, t):
    # dx_1/dt = [x_2(t), sin(x_1(t)), x_2(t)*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2) + betas[1] * (np.sin(x_1)) + betas[2] * (x_2*np.cos(x_1))

def eq_94_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), exp(x_1(t))/x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_2) + betas[4] * (np.exp(x_1)/x_3) + betas[5] * (x_1)

def eq_94_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), cos(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (np.cos(x_3)) + betas[7] * (np.cos(x_1)) + betas[8] * (x_2)

def system_94(X, betas, t):
    return np.array([eq_94_0(X, betas, t), eq_94_1(X, betas, t), eq_94_2(X, betas, t)])

def eq_95_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2) + betas[1] * (x_3) + betas[2] * (x_1)

def eq_95_1(X, betas, t):
    # dx_2/dt = [x_1(t), cos(x_3(t)), x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1) + betas[4] * (np.cos(x_3)) + betas[5] * (x_1*x_2)

def eq_95_2(X, betas, t):
    # dx_3/dt = [cos(x_1(t))/cos(x_2(t)), exp(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (np.cos(x_1)/np.cos(x_2)) + betas[7] * (np.exp(x_2)) + betas[8] * (x_3)

def system_95(X, betas, t):
    return np.array([eq_95_0(X, betas, t), eq_95_1(X, betas, t), eq_95_2(X, betas, t)])

def eq_96_0(X, betas, t):
    # dx_1/dt = [x_3(t)*exp(-x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.exp(-x_1))

def eq_96_1(X, betas, t):
    # dx_2/dt = [cos(x_1(t))/cos(x_3(t)), x_1(t)/x_2(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (np.cos(x_1)/np.cos(x_3)) + betas[2] * (x_1/x_2) + betas[3] * (x_3)

def eq_96_2(X, betas, t):
    # dx_3/dt = [x_1(t)*cos(x_2(t)), x_3(t)/cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1*np.cos(x_2)) + betas[5] * (x_3/np.cos(x_1))

def system_96(X, betas, t):
    return np.array([eq_96_0(X, betas, t), eq_96_1(X, betas, t), eq_96_2(X, betas, t)])

def eq_97_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))/x_3(t), x_1(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)/x_3) + betas[1] * (x_1) + betas[2] * (np.sin(x_3))

def eq_97_1(X, betas, t):
    # dx_2/dt = [sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_2))

def eq_97_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t)), sin(x_3(t))/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_3)) + betas[5] * (np.sin(x_3)/np.cos(x_2))

def system_97(X, betas, t):
    return np.array([eq_97_0(X, betas, t), eq_97_1(X, betas, t), eq_97_2(X, betas, t)])

def eq_98_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(x_1)) + betas[1] * (x_2)

def eq_98_1(X, betas, t):
    # dx_2/dt = [x_1(t), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (np.sin(x_2))

def eq_98_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t))/sin(x_1(t)), exp(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_3)/np.sin(x_1)) + betas[5] * (np.exp(x_2)) + betas[6] * (x_3)

def system_98(X, betas, t):
    return np.array([eq_98_0(X, betas, t), eq_98_1(X, betas, t), eq_98_2(X, betas, t)])

def eq_99_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), cos(x_1(t)), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (np.cos(x_1)) + betas[2] * (np.sin(x_2))

def eq_99_1(X, betas, t):
    # dx_2/dt = [x_3(t), exp(x_1(t))*exp(x_2(t)), x_3(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3) + betas[4] * (np.exp(x_1)*np.exp(x_2)) + betas[5] * (x_3*np.exp(x_2))

def eq_99_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_1(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_3) + betas[7] * (x_1) + betas[8] * (np.sin(x_1))

def system_99(X, betas, t):
    return np.array([eq_99_0(X, betas, t), eq_99_1(X, betas, t), eq_99_2(X, betas, t)])

def eq_100_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_1(t))/x_3(t), x_1(t)/sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_1)/x_3) + betas[2] * (x_1/np.sin(x_2))

def eq_100_1(X, betas, t):
    # dx_2/dt = [sin(x_2(t)), x_1(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_2)) + betas[4] * (x_1*np.cos(x_3))

def eq_100_2(X, betas, t):
    # dx_3/dt = [x_1(t), sin(x_1(t)), x_2(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1) + betas[6] * (np.sin(x_1)) + betas[7] * (x_2*np.sin(x_1))

def system_100(X, betas, t):
    return np.array([eq_100_0(X, betas, t), eq_100_1(X, betas, t), eq_100_2(X, betas, t)])

def eq_101_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_3(t), x_1(t)*sin(x_3(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1/x_3) + betas[1] * (x_1*np.sin(x_3)) + betas[2] * (np.cos(x_1))

def eq_101_1(X, betas, t):
    # dx_2/dt = [x_2(t), sin(x_1(t))*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2) + betas[4] * (np.sin(x_1)*np.sin(x_3))

def eq_101_2(X, betas, t):
    # dx_3/dt = [x_3(t), exp(x_1(t))*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3) + betas[6] * (np.exp(x_1)*np.sin(x_3))

def system_101(X, betas, t):
    return np.array([eq_101_0(X, betas, t), eq_101_1(X, betas, t), eq_101_2(X, betas, t)])

def eq_102_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1))

def eq_102_1(X, betas, t):
    # dx_2/dt = [cos(x_1(t))/x_2(t), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (np.cos(x_1)/x_2) + betas[2] * (np.cos(x_3))

def eq_102_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t)), x_2(t)*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_3)) + betas[4] * (x_2*np.cos(x_1))

def system_102(X, betas, t):
    return np.array([eq_102_0(X, betas, t), eq_102_1(X, betas, t), eq_102_2(X, betas, t)])

def eq_103_0(X, betas, t):
    # dx_1/dt = [cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_3))

def eq_103_1(X, betas, t):
    # dx_2/dt = [x_3(t)*exp(x_1(t)), x_1(t)/x_2(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (x_3*np.exp(x_1)) + betas[2] * (x_1/x_2) + betas[3] * (x_2)

def eq_103_2(X, betas, t):
    # dx_3/dt = [x_1(t)*cos(x_2(t)), x_1(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1*np.cos(x_2)) + betas[5] * (x_1*np.exp(x_2))

def system_103(X, betas, t):
    return np.array([eq_103_0(X, betas, t), eq_103_1(X, betas, t), eq_103_2(X, betas, t)])

def eq_104_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_1*x_3)

def eq_104_1(X, betas, t):
    # dx_2/dt = [x_1(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*np.cos(x_3))

def eq_104_2(X, betas, t):
    # dx_3/dt = [x_2(t), x_3(t)*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2) + betas[4] * (x_3*np.cos(x_2))

def system_104(X, betas, t):
    return np.array([eq_104_0(X, betas, t), eq_104_1(X, betas, t), eq_104_2(X, betas, t)])

def eq_105_0(X, betas, t):
    # dx_1/dt = [cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_3))

def eq_105_1(X, betas, t):
    # dx_2/dt = [x_1(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1) + betas[2] * (np.exp(x_2))

def eq_105_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_3) + betas[4] * (x_1)

def system_105(X, betas, t):
    return np.array([eq_105_0(X, betas, t), eq_105_1(X, betas, t), eq_105_2(X, betas, t)])

def eq_106_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_2(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_2/x_3)

def eq_106_1(X, betas, t):
    # dx_2/dt = [x_1(t)*sin(x_2(t)), x_3(t)*sin(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*np.sin(x_2)) + betas[3] * (x_3*np.sin(x_2)) + betas[4] * (x_3)

def eq_106_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), cos(x_1(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_1)*np.cos(x_2)) + betas[6] * (np.cos(x_1)/x_3)

def system_106(X, betas, t):
    return np.array([eq_106_0(X, betas, t), eq_106_1(X, betas, t), eq_106_2(X, betas, t)])

def eq_107_0(X, betas, t):
    # dx_1/dt = [cos(x_3(t))/cos(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_3)/np.cos(x_1)) + betas[1] * (x_3)

def eq_107_1(X, betas, t):
    # dx_2/dt = [x_1(t)*sin(x_2(t)), x_2(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*np.sin(x_2)) + betas[3] * (x_2) + betas[4] * (np.exp(x_1))

def eq_107_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_1)*np.cos(x_2)) + betas[6] * (x_2)

def system_107(X, betas, t):
    return np.array([eq_107_0(X, betas, t), eq_107_1(X, betas, t), eq_107_2(X, betas, t)])

def eq_108_0(X, betas, t):
    # dx_1/dt = [x_2(t), cos(x_1(t))/cos(x_2(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2) + betas[1] * (np.cos(x_1)/np.cos(x_2)) + betas[2] * (np.sin(x_3))

def eq_108_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_3(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_2) + betas[4] * (x_3) + betas[5] * (x_1*x_3)

def eq_108_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), exp(x_2(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (np.cos(x_3)) + betas[7] * (np.exp(x_2)) + betas[8] * (x_2)

def system_108(X, betas, t):
    return np.array([eq_108_0(X, betas, t), eq_108_1(X, betas, t), eq_108_2(X, betas, t)])

def eq_109_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(x_1(t)), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(x_1)) + betas[1] * (np.sin(x_2))

def eq_109_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (x_2)

def eq_109_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), x_2(t)*exp(x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (x_2*np.exp(x_3)) + betas[6] * (x_3)

def system_109(X, betas, t):
    return np.array([eq_109_0(X, betas, t), eq_109_1(X, betas, t), eq_109_2(X, betas, t)])

def eq_110_0(X, betas, t):
    # dx_1/dt = [x_3(t)*sin(x_1(t)), sin(x_2(t)), x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.sin(x_1)) + betas[1] * (np.sin(x_2)) + betas[2] * (x_1*x_2)

def eq_110_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), x_3(t)/x_2(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_3) + betas[4] * (x_3/x_2) + betas[5] * (np.sin(x_1))

def eq_110_2(X, betas, t):
    # dx_3/dt = [x_1(t)*cos(x_2(t)), sin(x_2(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_1*np.cos(x_2)) + betas[7] * (np.sin(x_2)) + betas[8] * (np.exp(x_1))

def system_110(X, betas, t):
    return np.array([eq_110_0(X, betas, t), eq_110_1(X, betas, t), eq_110_2(X, betas, t)])

def eq_111_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_2(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_2)) + betas[2] * (np.exp(x_3))

def eq_111_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1) + betas[4] * (x_3)

def eq_111_2(X, betas, t):
    # dx_3/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3)

def system_111(X, betas, t):
    return np.array([eq_111_0(X, betas, t), eq_111_1(X, betas, t), eq_111_2(X, betas, t)])

def eq_112_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(x_1))

def eq_112_1(X, betas, t):
    # dx_2/dt = [x_3(t), sin(x_1(t))/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (x_3) + betas[2] * (np.sin(x_1)/x_2)

def eq_112_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t)), exp(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_3)) + betas[4] * (np.exp(x_2)) + betas[5] * (x_3)

def system_112(X, betas, t):
    return np.array([eq_112_0(X, betas, t), eq_112_1(X, betas, t), eq_112_2(X, betas, t)])

def eq_113_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_2(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_2/x_3)

def eq_113_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1/x_3) + betas[3] * (x_1)

def eq_113_2(X, betas, t):
    # dx_3/dt = [sin(x_2(t))/sin(x_3(t)), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_2)/np.sin(x_3)) + betas[5] * (x_1*np.sin(x_3))

def system_113(X, betas, t):
    return np.array([eq_113_0(X, betas, t), eq_113_1(X, betas, t), eq_113_2(X, betas, t)])

def eq_114_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), cos(x_1(t)), x_2(t)/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (np.cos(x_1)) + betas[2] * (x_2/x_1)

def eq_114_1(X, betas, t):
    # dx_2/dt = [x_3(t), exp(x_1(t))*exp(x_2(t)), x_3(t)/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3) + betas[4] * (np.exp(x_1)*np.exp(x_2)) + betas[5] * (x_3/x_1)

def eq_114_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_1(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_3) + betas[7] * (x_1) + betas[8] * (np.cos(x_1))

def system_114(X, betas, t):
    return np.array([eq_114_0(X, betas, t), eq_114_1(X, betas, t), eq_114_2(X, betas, t)])

def eq_115_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_2(t)*exp(-x_3(t)), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_2*np.exp(-x_3)) + betas[2] * (np.sin(x_1))

def eq_115_1(X, betas, t):
    # dx_2/dt = [x_1(t)*sin(x_2(t)), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.sin(x_2)) + betas[4] * (x_3*np.sin(x_2))

def eq_115_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), x_3(t)/cos(x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_1)*np.cos(x_2)) + betas[6] * (x_3/np.cos(x_1)) + betas[7] * (x_1)

def system_115(X, betas, t):
    return np.array([eq_115_0(X, betas, t), eq_115_1(X, betas, t), eq_115_2(X, betas, t)])

def eq_116_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1/x_3)

def eq_116_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), x_1(t)*exp(x_3(t)), x_1(t)/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (np.exp(x_1)) + betas[2] * (x_1*np.exp(x_3)) + betas[3] * (x_1/np.cos(x_3))

def eq_116_2(X, betas, t):
    # dx_3/dt = [x_1(t)/x_2(t), x_3(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1/x_2) + betas[5] * (x_3) + betas[6] * (np.sin(x_3))

def system_116(X, betas, t):
    return np.array([eq_116_0(X, betas, t), eq_116_1(X, betas, t), eq_116_2(X, betas, t)])

def eq_117_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2/x_3)

def eq_117_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*cos(x_2(t)), x_1(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (np.exp(x_1)*np.cos(x_2)) + betas[2] * (x_1) + betas[3] * (x_2)

def eq_117_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3) + betas[5] * (x_1)

def system_117(X, betas, t):
    return np.array([eq_117_0(X, betas, t), eq_117_1(X, betas, t), eq_117_2(X, betas, t)])

def eq_118_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t)), exp(x_1(t))/x_2(t), x_2(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)) + betas[1] * (np.exp(x_1)/x_2) + betas[2] * (x_2*np.exp(x_1))

def eq_118_1(X, betas, t):
    # dx_2/dt = [x_3(t)*sin(x_1(t)), cos(x_2(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3*np.sin(x_1)) + betas[4] * (np.cos(x_2)) + betas[5] * (np.exp(x_3))

def eq_118_2(X, betas, t):
    # dx_3/dt = [cos(x_1(t)), x_2(t)*x_3(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.cos(x_1)) + betas[7] * (x_2*x_3) + betas[8] * (np.exp(x_2))

def system_118(X, betas, t):
    return np.array([eq_118_0(X, betas, t), eq_118_1(X, betas, t), eq_118_2(X, betas, t)])

def eq_119_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_1(t))/x_3(t), x_2(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_1)/x_3) + betas[2] * (x_2*x_3)

def eq_119_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_1(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2) + betas[4] * (x_1*np.cos(x_3))

def eq_119_2(X, betas, t):
    # dx_3/dt = [x_1(t)*cos(x_3(t)), exp(x_1(t)), x_2(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*np.cos(x_3)) + betas[6] * (np.exp(x_1)) + betas[7] * (x_2*np.sin(x_1))

def system_119(X, betas, t):
    return np.array([eq_119_0(X, betas, t), eq_119_1(X, betas, t), eq_119_2(X, betas, t)])

def eq_120_0(X, betas, t):
    # dx_1/dt = [x_1(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.exp(x_1))

def eq_120_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t)), x_1(t)/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_1)) + betas[3] * (x_1/np.cos(x_3))

def eq_120_2(X, betas, t):
    # dx_3/dt = [cos(x_1(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.cos(x_1)) + betas[5] * (np.sin(x_3))

def system_120(X, betas, t):
    return np.array([eq_120_0(X, betas, t), eq_120_1(X, betas, t), eq_120_2(X, betas, t)])

def eq_121_0(X, betas, t):
    # dx_1/dt = [x_3(t), x_1(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3) + betas[1] * (x_1/x_2)

def eq_121_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1)

def eq_121_2(X, betas, t):
    # dx_3/dt = [x_1(t), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1) + betas[4] * (x_1*np.sin(x_3))

def system_121(X, betas, t):
    return np.array([eq_121_0(X, betas, t), eq_121_1(X, betas, t), eq_121_2(X, betas, t)])

def eq_122_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(x_1(t)), x_1(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(x_1)) + betas[1] * (x_1/x_2)

def eq_122_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_1(t)*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (x_1*np.cos(x_2))

def eq_122_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), x_2(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (x_2) + betas[6] * (x_3)

def system_122(X, betas, t):
    return np.array([eq_122_0(X, betas, t), eq_122_1(X, betas, t), eq_122_2(X, betas, t)])

def eq_123_0(X, betas, t):
    # dx_1/dt = [exp(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_1)) + betas[1] * (x_3)

def eq_123_1(X, betas, t):
    # dx_2/dt = [x_1(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (np.cos(x_1))

def eq_123_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), exp(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_1)) + betas[5] * (np.exp(x_2)) + betas[6] * (x_3)

def system_123(X, betas, t):
    return np.array([eq_123_0(X, betas, t), eq_123_1(X, betas, t), eq_123_2(X, betas, t)])

def eq_124_0(X, betas, t):
    # dx_1/dt = [x_3(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.exp(x_2))

def eq_124_1(X, betas, t):
    # dx_2/dt = [x_2(t), cos(x_3(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_2) + betas[2] * (np.cos(x_3)) + betas[3] * (np.exp(x_1))

def eq_124_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), x_2(t)*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.cos(x_3)) + betas[5] * (x_2*np.cos(x_1))

def system_124(X, betas, t):
    return np.array([eq_124_0(X, betas, t), eq_124_1(X, betas, t), eq_124_2(X, betas, t)])

def eq_125_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (np.cos(x_1))

def eq_125_1(X, betas, t):
    # dx_2/dt = [x_3(t), exp(x_1(t))*exp(x_2(t)), x_2(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3) + betas[3] * (np.exp(x_1)*np.exp(x_2)) + betas[4] * (x_2*np.cos(x_3))

def eq_125_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_3(t)*sin(x_1(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3) + betas[6] * (x_3*np.sin(x_1)) + betas[7] * (x_1*x_3)

def system_125(X, betas, t):
    return np.array([eq_125_0(X, betas, t), eq_125_1(X, betas, t), eq_125_2(X, betas, t)])

def eq_126_0(X, betas, t):
    # dx_1/dt = [sin(x_2(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_2)) + betas[1] * (x_2)

def eq_126_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2)

def eq_126_2(X, betas, t):
    # dx_3/dt = [exp(-x_2(t))*cos(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(-x_2)*np.cos(x_1)) + betas[4] * (x_3)

def system_126(X, betas, t):
    return np.array([eq_126_0(X, betas, t), eq_126_1(X, betas, t), eq_126_2(X, betas, t)])

def eq_127_0(X, betas, t):
    # dx_1/dt = [cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_3))

def eq_127_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t)), x_2(t)*exp(-x_3(t)), x_1(t)*exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (np.exp(x_2)) + betas[2] * (x_2*np.exp(-x_3)) + betas[3] * (x_1*np.exp(x_3))

def eq_127_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_3(t), cos(x_3(t)), x_3(t)/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1*x_3) + betas[5] * (np.cos(x_3)) + betas[6] * (x_3/np.cos(x_2))

def system_127(X, betas, t):
    return np.array([eq_127_0(X, betas, t), eq_127_1(X, betas, t), eq_127_2(X, betas, t)])

def eq_128_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))/x_3(t), x_1(t), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)/x_3) + betas[1] * (x_1) + betas[2] * (np.cos(x_3))

def eq_128_1(X, betas, t):
    # dx_2/dt = [x_3(t)/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3/np.cos(x_2))

def eq_128_2(X, betas, t):
    # dx_3/dt = [x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1)

def system_128(X, betas, t):
    return np.array([eq_128_0(X, betas, t), eq_128_1(X, betas, t), eq_128_2(X, betas, t)])

def eq_129_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_3)

def eq_129_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t), x_3(t), x_2(t)*exp(-x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2/x_1) + betas[3] * (x_3) + betas[4] * (x_2*np.exp(-x_1))

def eq_129_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), exp(x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_1)*np.cos(x_2)) + betas[6] * (np.exp(x_3)) + betas[7] * (x_3)

def system_129(X, betas, t):
    return np.array([eq_129_0(X, betas, t), eq_129_1(X, betas, t), eq_129_2(X, betas, t)])

def eq_130_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)) + betas[1] * (x_3)

def eq_130_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (x_2*np.exp(x_1))

def eq_130_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), exp(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (np.exp(x_2)) + betas[6] * (x_1)

def system_130(X, betas, t):
    return np.array([eq_130_0(X, betas, t), eq_130_1(X, betas, t), eq_130_2(X, betas, t)])

def eq_131_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), exp(x_1(t))/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1/x_2) + betas[1] * (np.exp(x_1)/np.cos(x_2))

def eq_131_1(X, betas, t):
    # dx_2/dt = [exp(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_3)) + betas[3] * (x_2)

def eq_131_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), exp(x_1(t))*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)) + betas[5] * (np.exp(x_1)*np.sin(x_3))

def system_131(X, betas, t):
    return np.array([eq_131_0(X, betas, t), eq_131_1(X, betas, t), eq_131_2(X, betas, t)])

def eq_132_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1/x_2)

def eq_132_1(X, betas, t):
    # dx_2/dt = [x_3(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (x_3/x_2)

def eq_132_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*x_3)

def system_132(X, betas, t):
    return np.array([eq_132_0(X, betas, t), eq_132_1(X, betas, t), eq_132_2(X, betas, t)])

def eq_133_0(X, betas, t):
    # dx_1/dt = [x_2(t), sin(x_1(t)), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2) + betas[1] * (np.sin(x_1)) + betas[2] * (np.sin(x_2))

def eq_133_1(X, betas, t):
    # dx_2/dt = [x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3) + betas[4] * (x_1)

def eq_133_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_3)) + betas[6] * (x_1*x_3)

def system_133(X, betas, t):
    return np.array([eq_133_0(X, betas, t), eq_133_1(X, betas, t), eq_133_2(X, betas, t)])

def eq_134_0(X, betas, t):
    # dx_1/dt = [cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_3))

def eq_134_1(X, betas, t):
    # dx_2/dt = [x_3(t)/x_2(t), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_3/x_2) + betas[2] * (x_3*np.sin(x_2))

def eq_134_2(X, betas, t):
    # dx_3/dt = [x_1(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1) + betas[4] * (x_1*x_3)

def system_134(X, betas, t):
    return np.array([eq_134_0(X, betas, t), eq_134_1(X, betas, t), eq_134_2(X, betas, t)])

def eq_135_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t)), x_1(t), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)) + betas[1] * (x_1) + betas[2] * (np.cos(x_2))

def eq_135_1(X, betas, t):
    # dx_2/dt = [x_3(t), sin(x_2(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3) + betas[4] * (np.sin(x_2)/x_3)

def eq_135_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), cos(x_3(t)), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.exp(x_1)) + betas[6] * (np.cos(x_3)) + betas[7] * (x_1/x_3)

def system_135(X, betas, t):
    return np.array([eq_135_0(X, betas, t), eq_135_1(X, betas, t), eq_135_2(X, betas, t)])

def eq_136_0(X, betas, t):
    # dx_1/dt = [exp(x_1(t))*exp(x_3(t)), x_3(t), x_3(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_1)*np.exp(x_3)) + betas[1] * (x_3) + betas[2] * (x_3*np.sin(x_1))

def eq_136_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2) + betas[4] * (x_3)

def eq_136_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), exp(x_2(t))/x_3(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_1)*np.cos(x_2)) + betas[6] * (np.exp(x_2)/x_3) + betas[7] * (x_3)

def system_136(X, betas, t):
    return np.array([eq_136_0(X, betas, t), eq_136_1(X, betas, t), eq_136_2(X, betas, t)])

def eq_137_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_2(t)*cos(x_1(t)), x_1(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_2*np.cos(x_1)) + betas[2] * (x_1/x_2)

def eq_137_1(X, betas, t):
    # dx_2/dt = [x_1(t)*sin(x_2(t)), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.sin(x_2)) + betas[4] * (x_3*np.sin(x_2))

def eq_137_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), sin(x_3(t)), x_3(t)*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_1)) + betas[6] * (np.sin(x_3)) + betas[7] * (x_3*np.cos(x_2))

def system_137(X, betas, t):
    return np.array([eq_137_0(X, betas, t), eq_137_1(X, betas, t), eq_137_2(X, betas, t)])

def eq_138_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_3)

def eq_138_1(X, betas, t):
    # dx_2/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3)

def eq_138_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), cos(x_3(t))/x_2(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_1)*np.cos(x_2)) + betas[4] * (np.cos(x_3)/x_2) + betas[5] * (x_3)

def system_138(X, betas, t):
    return np.array([eq_138_0(X, betas, t), eq_138_1(X, betas, t), eq_138_2(X, betas, t)])

def eq_139_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))/x_3(t), cos(x_1(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)/x_3) + betas[1] * (np.cos(x_1)) + betas[2] * (x_1*x_3)

def eq_139_1(X, betas, t):
    # dx_2/dt = [x_2(t)/cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2/np.cos(x_1))

def eq_139_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t)), sin(x_3(t))/cos(x_2(t)), x_2(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_3)) + betas[5] * (np.sin(x_3)/np.cos(x_2)) + betas[6] * (x_2*np.sin(x_3))

def system_139(X, betas, t):
    return np.array([eq_139_0(X, betas, t), eq_139_1(X, betas, t), eq_139_2(X, betas, t)])

def eq_140_0(X, betas, t):
    # dx_1/dt = [x_3(t)*sin(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.sin(x_1)) + betas[1] * (x_3)

def eq_140_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), x_1(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*x_3) + betas[3] * (x_1) + betas[4] * (np.sin(x_1))

def eq_140_2(X, betas, t):
    # dx_3/dt = [x_1(t)/cos(x_3(t)), x_2(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1/np.cos(x_3)) + betas[6] * (x_2) + betas[7] * (np.exp(x_1))

def system_140(X, betas, t):
    return np.array([eq_140_0(X, betas, t), eq_140_1(X, betas, t), eq_140_2(X, betas, t)])

def eq_141_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)*exp(x_2(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1*np.exp(x_2)) + betas[2] * (np.sin(x_3))

def eq_141_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t))/cos(x_1(t)), exp(x_2(t))*exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_2)/np.cos(x_1)) + betas[4] * (np.exp(x_2)*np.exp(x_3))

def eq_141_2(X, betas, t):
    # dx_3/dt = [cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_2))

def system_141(X, betas, t):
    return np.array([eq_141_0(X, betas, t), eq_141_1(X, betas, t), eq_141_2(X, betas, t)])

def eq_142_0(X, betas, t):
    # dx_1/dt = [x_2(t), sin(x_1(t)), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2) + betas[1] * (np.sin(x_1)) + betas[2] * (np.exp(x_2))

def eq_142_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_2) + betas[4] * (x_3)

def eq_142_2(X, betas, t):
    # dx_3/dt = [x_3(t)*exp(x_1(t)), x_1(t)*x_3(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3*np.exp(x_1)) + betas[6] * (x_1*x_3) + betas[7] * (x_2)

def system_142(X, betas, t):
    return np.array([eq_142_0(X, betas, t), eq_142_1(X, betas, t), eq_142_2(X, betas, t)])

def eq_143_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))/x_3(t), x_3(t)/cos(x_1(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)/x_3) + betas[1] * (x_3/np.cos(x_1)) + betas[2] * (x_1*x_3)

def eq_143_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_3(t)*exp(-x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2) + betas[4] * (x_3*np.exp(-x_2))

def eq_143_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t))/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_3)/np.cos(x_2))

def system_143(X, betas, t):
    return np.array([eq_143_0(X, betas, t), eq_143_1(X, betas, t), eq_143_2(X, betas, t)])

def eq_144_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_1(t))/x_3(t), exp(-x_1(t))*exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_1)/x_3) + betas[2] * (np.exp(-x_1)*np.exp(x_3))

def eq_144_1(X, betas, t):
    # dx_2/dt = [x_2(t)*exp(x_1(t)), x_1(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2*np.exp(x_1)) + betas[4] * (x_1*np.cos(x_3))

def eq_144_2(X, betas, t):
    # dx_3/dt = [x_1(t)*cos(x_3(t)), sin(x_1(t)), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*np.cos(x_3)) + betas[6] * (np.sin(x_1)) + betas[7] * (np.cos(x_2))

def system_144(X, betas, t):
    return np.array([eq_144_0(X, betas, t), eq_144_1(X, betas, t), eq_144_2(X, betas, t)])

def eq_145_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)*exp(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1*np.exp(x_2)) + betas[2] * (x_1)

def eq_145_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t))/cos(x_1(t)), x_3(t)*cos(x_1(t)), exp(x_2(t))/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_2)/np.cos(x_1)) + betas[4] * (x_3*np.cos(x_1)) + betas[5] * (np.exp(x_2)/np.cos(x_3))

def eq_145_2(X, betas, t):
    # dx_3/dt = [cos(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (np.cos(x_2)) + betas[7] * (x_1)

def system_145(X, betas, t):
    return np.array([eq_145_0(X, betas, t), eq_145_1(X, betas, t), eq_145_2(X, betas, t)])

def eq_146_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2) + betas[1] * (x_1) + betas[2] * (x_3)

def eq_146_1(X, betas, t):
    # dx_2/dt = [x_3(t)*cos(x_2(t)), x_1(t), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3*np.cos(x_2)) + betas[4] * (x_1) + betas[5] * (np.cos(x_2))

def eq_146_2(X, betas, t):
    # dx_3/dt = [x_3(t)/sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_3/np.sin(x_2))

def system_146(X, betas, t):
    return np.array([eq_146_0(X, betas, t), eq_146_1(X, betas, t), eq_146_2(X, betas, t)])

def eq_147_0(X, betas, t):
    # dx_1/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3)

def eq_147_1(X, betas, t):
    # dx_2/dt = [x_1(t)*cos(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1*np.cos(x_2)) + betas[2] * (x_3)

def eq_147_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), cos(x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_1)*np.cos(x_2)) + betas[4] * (np.cos(x_3)) + betas[5] * (x_3)

def system_147(X, betas, t):
    return np.array([eq_147_0(X, betas, t), eq_147_1(X, betas, t), eq_147_2(X, betas, t)])

def eq_148_0(X, betas, t):
    # dx_1/dt = [x_2(t), sin(x_1(t)), exp(x_2(t))*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2) + betas[1] * (np.sin(x_1)) + betas[2] * (np.exp(x_2)*np.cos(x_3))

def eq_148_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_2) + betas[4] * (x_1)

def eq_148_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), x_1(t)*x_3(t), x_2(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_3)) + betas[6] * (x_1*x_3) + betas[7] * (x_2*np.sin(x_1))

def system_148(X, betas, t):
    return np.array([eq_148_0(X, betas, t), eq_148_1(X, betas, t), eq_148_2(X, betas, t)])

def eq_149_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))/x_3(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)/x_3) + betas[1] * (x_1*x_3)

def eq_149_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2)

def eq_149_2(X, betas, t):
    # dx_3/dt = [x_1(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1) + betas[4] * (np.sin(x_3))

def system_149(X, betas, t):
    return np.array([eq_149_0(X, betas, t), eq_149_1(X, betas, t), eq_149_2(X, betas, t)])

def eq_150_0(X, betas, t):
    # dx_1/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3)

def eq_150_1(X, betas, t):
    # dx_2/dt = [cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (np.cos(x_3))

def eq_150_2(X, betas, t):
    # dx_3/dt = [cos(x_2(t)), x_2(t)*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_2)) + betas[3] * (x_2*np.cos(x_1))

def system_150(X, betas, t):
    return np.array([eq_150_0(X, betas, t), eq_150_1(X, betas, t), eq_150_2(X, betas, t)])

def eq_151_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_3(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2/x_3) + betas[1] * (x_3)

def eq_151_1(X, betas, t):
    # dx_2/dt = [x_1(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (np.sin(x_1))

def eq_151_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), sin(x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (np.sin(x_3)) + betas[6] * (x_3)

def system_151(X, betas, t):
    return np.array([eq_151_0(X, betas, t), eq_151_1(X, betas, t), eq_151_2(X, betas, t)])

def eq_152_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_3)

def eq_152_1(X, betas, t):
    # dx_2/dt = [x_1(t), exp(-x_2(t))*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (np.exp(-x_2)*np.sin(x_3))

def eq_152_2(X, betas, t):
    # dx_3/dt = [x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1*np.sin(x_3))

def system_152(X, betas, t):
    return np.array([eq_152_0(X, betas, t), eq_152_1(X, betas, t), eq_152_2(X, betas, t)])

def eq_153_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t))/x_3(t), x_1(t)/x_3(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)/x_3) + betas[1] * (x_1/x_3) + betas[2] * (np.sin(x_3))

def eq_153_1(X, betas, t):
    # dx_2/dt = [x_3(t)/x_1(t), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3/x_1) + betas[4] * (np.cos(x_2))

def eq_153_2(X, betas, t):
    # dx_3/dt = [x_2(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_2) + betas[6] * (np.cos(x_1))

def system_153(X, betas, t):
    return np.array([eq_153_0(X, betas, t), eq_153_1(X, betas, t), eq_153_2(X, betas, t)])

def eq_154_0(X, betas, t):
    # dx_1/dt = [x_3(t)*sin(x_2(t)), x_1(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.sin(x_2)) + betas[1] * (x_1) + betas[2] * (x_1*x_3)

def eq_154_1(X, betas, t):
    # dx_2/dt = [sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_2))

def eq_154_2(X, betas, t):
    # dx_3/dt = [x_1(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1) + betas[5] * (np.sin(x_3))

def system_154(X, betas, t):
    return np.array([eq_154_0(X, betas, t), eq_154_1(X, betas, t), eq_154_2(X, betas, t)])

def eq_155_0(X, betas, t):
    # dx_1/dt = [cos(x_3(t)), x_1(t)/sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_3)) + betas[1] * (x_1/np.sin(x_3))

def eq_155_1(X, betas, t):
    # dx_2/dt = [x_2(t), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2) + betas[3] * (np.cos(x_3))

def eq_155_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), cos(x_3(t))/x_1(t), cos(x_1(t))/sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)) + betas[5] * (np.cos(x_3)/x_1) + betas[6] * (np.cos(x_1)/np.sin(x_2))

def system_155(X, betas, t):
    return np.array([eq_155_0(X, betas, t), eq_155_1(X, betas, t), eq_155_2(X, betas, t)])

def eq_156_0(X, betas, t):
    # dx_1/dt = [x_1(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.exp(x_1))

def eq_156_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t)), x_2(t)*exp(-x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_2)) + betas[3] * (x_2*np.exp(-x_3))

def eq_156_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_3(t), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1*x_3) + betas[5] * (np.cos(x_3))

def system_156(X, betas, t):
    return np.array([eq_156_0(X, betas, t), eq_156_1(X, betas, t), eq_156_2(X, betas, t)])

def eq_157_0(X, betas, t):
    # dx_1/dt = [x_3(t)/x_1(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3/x_1) + betas[1] * (x_1)

def eq_157_1(X, betas, t):
    # dx_2/dt = [sin(x_2(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_2)/x_3)

def eq_157_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)) + betas[4] * (x_1/x_3)

def system_157(X, betas, t):
    return np.array([eq_157_0(X, betas, t), eq_157_1(X, betas, t), eq_157_2(X, betas, t)])

def eq_158_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_2(t)/sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_2/np.sin(x_3))

def eq_158_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_1)) + betas[3] * (x_1)

def eq_158_2(X, betas, t):
    # dx_3/dt = [x_2(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (x_2)

def system_158(X, betas, t):
    return np.array([eq_158_0(X, betas, t), eq_158_1(X, betas, t), eq_158_2(X, betas, t)])

def eq_159_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))/x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)/x_3) + betas[1] * (x_1)

def eq_159_1(X, betas, t):
    # dx_2/dt = [exp(-x_3(t))*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(-x_3)*np.sin(x_2))

def eq_159_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_2(t), sin(x_3(t))/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_2) + betas[4] * (np.sin(x_3)/np.cos(x_2))

def system_159(X, betas, t):
    return np.array([eq_159_0(X, betas, t), eq_159_1(X, betas, t), eq_159_2(X, betas, t)])

def eq_160_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)) + betas[1] * (x_1*x_3)

def eq_160_1(X, betas, t):
    # dx_2/dt = [x_1(t), cos(x_3(t))/cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (np.cos(x_3)/np.cos(x_1))

def eq_160_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t))/x_1(t), exp(x_1(t)), sin(x_2(t))*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_3)/x_1) + betas[5] * (np.exp(x_1)) + betas[6] * (np.sin(x_2)*np.cos(x_1))

def system_160(X, betas, t):
    return np.array([eq_160_0(X, betas, t), eq_160_1(X, betas, t), eq_160_2(X, betas, t)])

def eq_161_0(X, betas, t):
    # dx_1/dt = [x_3(t)*exp(x_2(t)), x_2(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.exp(x_2)) + betas[1] * (x_2/x_3)

def eq_161_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*cos(x_2(t)), exp(x_1(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1)*np.cos(x_2)) + betas[3] * (np.exp(x_1)) + betas[4] * (np.exp(x_3))

def eq_161_2(X, betas, t):
    # dx_3/dt = [x_2(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_2)

def system_161(X, betas, t):
    return np.array([eq_161_0(X, betas, t), eq_161_1(X, betas, t), eq_161_2(X, betas, t)])

def eq_162_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1/x_3)

def eq_162_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), cos(x_3(t)), x_1(t)/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (np.exp(x_1)) + betas[2] * (np.cos(x_3)) + betas[3] * (x_1/np.cos(x_3))

def eq_162_2(X, betas, t):
    # dx_3/dt = [sin(x_2(t))/x_1(t), x_3(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_2)/x_1) + betas[5] * (x_3) + betas[6] * (np.sin(x_3))

def system_162(X, betas, t):
    return np.array([eq_162_0(X, betas, t), eq_162_1(X, betas, t), eq_162_2(X, betas, t)])

def eq_163_0(X, betas, t):
    # dx_1/dt = [x_1(t)*sin(x_3(t)), cos(x_1(t)), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*np.sin(x_3)) + betas[1] * (np.cos(x_1)) + betas[2] * (np.sin(x_2))

def eq_163_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)*np.exp(x_3))

def eq_163_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t)), x_3(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_3)) + betas[5] * (x_3) + betas[6] * (np.sin(x_1))

def system_163(X, betas, t):
    return np.array([eq_163_0(X, betas, t), eq_163_1(X, betas, t), eq_163_2(X, betas, t)])

def eq_164_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_1(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_1*np.sin(x_2))

def eq_164_1(X, betas, t):
    # dx_2/dt = [x_3(t), x_2(t), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3) + betas[3] * (x_2) + betas[4] * (x_3*np.sin(x_2))

def eq_164_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), exp(-x_2(t))*exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_1)*np.cos(x_2)) + betas[6] * (np.exp(-x_2)*np.exp(x_3))

def system_164(X, betas, t):
    return np.array([eq_164_0(X, betas, t), eq_164_1(X, betas, t), eq_164_2(X, betas, t)])

def eq_165_0(X, betas, t):
    # dx_1/dt = [sin(x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_3)) + betas[1] * (x_3)

def eq_165_1(X, betas, t):
    # dx_2/dt = [sin(x_3(t)), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_3)) + betas[3] * (np.cos(x_3))

def eq_165_2(X, betas, t):
    # dx_3/dt = [x_2(t), x_2(t)*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_2) + betas[5] * (x_2*np.cos(x_1))

def system_165(X, betas, t):
    return np.array([eq_165_0(X, betas, t), eq_165_1(X, betas, t), eq_165_2(X, betas, t)])

def eq_166_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), x_3(t)*exp(-x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (x_3*np.exp(-x_2))

def eq_166_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*cos(x_2(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1)*np.cos(x_2)) + betas[3] * (np.exp(x_1))

def eq_166_2(X, betas, t):
    # dx_3/dt = [x_1(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1) + betas[5] * (x_2)

def system_166(X, betas, t):
    return np.array([eq_166_0(X, betas, t), eq_166_1(X, betas, t), eq_166_2(X, betas, t)])

def eq_167_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t)), x_3(t), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)) + betas[1] * (x_3) + betas[2] * (x_1*np.sin(x_3))

def eq_167_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), cos(x_2(t)), x_2(t)/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)) + betas[4] * (np.cos(x_2)) + betas[5] * (x_2/x_1)

def eq_167_2(X, betas, t):
    # dx_3/dt = [cos(x_1(t)), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.cos(x_1)) + betas[7] * (np.exp(x_2))

def system_167(X, betas, t):
    return np.array([eq_167_0(X, betas, t), eq_167_1(X, betas, t), eq_167_2(X, betas, t)])

def eq_168_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1)

def eq_168_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*x_3) + betas[3] * (x_1*x_2)

def eq_168_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), x_3(t), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_1)) + betas[5] * (x_3) + betas[6] * (x_1/x_3)

def system_168(X, betas, t):
    return np.array([eq_168_0(X, betas, t), eq_168_1(X, betas, t), eq_168_2(X, betas, t)])

def eq_169_0(X, betas, t):
    # dx_1/dt = [x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1)

def eq_169_1(X, betas, t):
    # dx_2/dt = [x_1(t), exp(x_2(t)), x_1(t)/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1) + betas[2] * (np.exp(x_2)) + betas[3] * (x_1/np.cos(x_2))

def eq_169_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_3(t), sin(x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1*x_3) + betas[5] * (np.sin(x_1)) + betas[6] * (x_1)

def system_169(X, betas, t):
    return np.array([eq_169_0(X, betas, t), eq_169_1(X, betas, t), eq_169_2(X, betas, t)])

def eq_170_0(X, betas, t):
    # dx_1/dt = [x_3(t)*sin(x_1(t)), x_2(t), x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.sin(x_1)) + betas[1] * (x_2) + betas[2] * (x_1*x_2)

def eq_170_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), x_3(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_3) + betas[4] * (x_3) + betas[5] * (np.sin(x_1))

def eq_170_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t))*sin(x_2(t)), x_2(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.exp(x_3)*np.sin(x_2)) + betas[7] * (x_2) + betas[8] * (np.exp(x_1))

def system_170(X, betas, t):
    return np.array([eq_170_0(X, betas, t), eq_170_1(X, betas, t), eq_170_2(X, betas, t)])

def eq_171_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2/x_1) + betas[1] * (x_3)

def eq_171_1(X, betas, t):
    # dx_2/dt = [x_1(t)*sin(x_2(t)), x_2(t), sin(x_2(t))/sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*np.sin(x_2)) + betas[3] * (x_2) + betas[4] * (np.sin(x_2)/np.sin(x_3))

def eq_171_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t)), x_1(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_3)) + betas[6] * (x_1*np.exp(x_2))

def system_171(X, betas, t):
    return np.array([eq_171_0(X, betas, t), eq_171_1(X, betas, t), eq_171_2(X, betas, t)])

def eq_172_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_3)

def eq_172_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_1(t)*exp(-x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (x_1*np.exp(-x_3))

def eq_172_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), x_1(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (x_1) + betas[6] * (x_3)

def system_172(X, betas, t):
    return np.array([eq_172_0(X, betas, t), eq_172_1(X, betas, t), eq_172_2(X, betas, t)])

def eq_173_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_3(t)*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_3*np.cos(x_2))

def eq_173_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t)*exp(-x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (x_2*np.exp(-x_3))

def eq_173_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.cos(x_3)) + betas[5] * (x_1)

def system_173(X, betas, t):
    return np.array([eq_173_0(X, betas, t), eq_173_1(X, betas, t), eq_173_2(X, betas, t)])

def eq_174_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t)), x_1(t)*exp(-x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)) + betas[1] * (x_1*np.exp(-x_3)) + betas[2] * (x_1)

def eq_174_1(X, betas, t):
    # dx_2/dt = [x_2(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2*x_3)

def eq_174_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t)), x_1(t), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_3)) + betas[5] * (x_1) + betas[6] * (np.cos(x_2))

def system_174(X, betas, t):
    return np.array([eq_174_0(X, betas, t), eq_174_1(X, betas, t), eq_174_2(X, betas, t)])

def eq_175_0(X, betas, t):
    # dx_1/dt = [x_2(t)/cos(x_1(t)), x_1(t)*exp(-x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2/np.cos(x_1)) + betas[1] * (x_1*np.exp(-x_3)) + betas[2] * (x_1)

def eq_175_1(X, betas, t):
    # dx_2/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3)

def eq_175_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_2(t), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3) + betas[5] * (x_2) + betas[6] * (np.cos(x_2))

def system_175(X, betas, t):
    return np.array([eq_175_0(X, betas, t), eq_175_1(X, betas, t), eq_175_2(X, betas, t)])

def eq_176_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_2))

def eq_176_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t))*cos(x_3(t)), exp(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_1)*np.cos(x_3)) + betas[3] * (np.exp(x_1)) + betas[4] * (x_3)

def eq_176_2(X, betas, t):
    # dx_3/dt = [x_1(t), x_3(t), x_2(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1) + betas[6] * (x_3) + betas[7] * (x_2*x_3)

def system_176(X, betas, t):
    return np.array([eq_176_0(X, betas, t), eq_176_1(X, betas, t), eq_176_2(X, betas, t)])

def eq_177_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))/x_2(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)/x_2) + betas[1] * (x_3)

def eq_177_1(X, betas, t):
    # dx_2/dt = [x_1(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (np.cos(x_1))

def eq_177_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), exp(x_2(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (np.exp(x_2)) + betas[6] * (np.exp(x_3))

def system_177(X, betas, t):
    return np.array([eq_177_0(X, betas, t), eq_177_1(X, betas, t), eq_177_2(X, betas, t)])

def eq_178_0(X, betas, t):
    # dx_1/dt = [exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_1))

def eq_178_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_3(t), x_1(t), x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1/x_3) + betas[2] * (x_1) + betas[3] * (x_1*x_2)

def eq_178_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)) + betas[5] * (x_3*np.sin(x_2))

def system_178(X, betas, t):
    return np.array([eq_178_0(X, betas, t), eq_178_1(X, betas, t), eq_178_2(X, betas, t)])

def eq_179_0(X, betas, t):
    # dx_1/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3)

def eq_179_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1)

def eq_179_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), exp(x_2(t)), sin(x_2(t))*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_1)*np.cos(x_2)) + betas[3] * (np.exp(x_2)) + betas[4] * (np.sin(x_2)*np.sin(x_3))

def system_179(X, betas, t):
    return np.array([eq_179_0(X, betas, t), eq_179_1(X, betas, t), eq_179_2(X, betas, t)])

def eq_180_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1/x_2)

def eq_180_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1)

def eq_180_2(X, betas, t):
    # dx_3/dt = [cos(x_2(t)), x_1(t)*sin(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_2)) + betas[3] * (x_1*np.sin(x_3)) + betas[4] * (x_2)

def system_180(X, betas, t):
    return np.array([eq_180_0(X, betas, t), eq_180_1(X, betas, t), eq_180_2(X, betas, t)])

def eq_181_0(X, betas, t):
    # dx_1/dt = [x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1)

def eq_181_1(X, betas, t):
    # dx_2/dt = [cos(x_2(t))*cos(x_3(t)), sin(x_1(t)), x_1(t)/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (np.cos(x_2)*np.cos(x_3)) + betas[2] * (np.sin(x_1)) + betas[3] * (x_1/np.cos(x_3))

def eq_181_2(X, betas, t):
    # dx_3/dt = [cos(x_1(t)), sin(x_3(t)), x_2(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.cos(x_1)) + betas[5] * (np.sin(x_3)) + betas[6] * (x_2*x_3)

def system_181(X, betas, t):
    return np.array([eq_181_0(X, betas, t), eq_181_1(X, betas, t), eq_181_2(X, betas, t)])

def eq_182_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), x_3(t), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (x_3) + betas[2] * (np.sin(x_2))

def eq_182_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*cos(x_2(t)), sin(x_2(t))/x_3(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)*np.cos(x_2)) + betas[4] * (np.sin(x_2)/x_3) + betas[5] * (x_2)

def eq_182_2(X, betas, t):
    # dx_3/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_3)

def system_182(X, betas, t):
    return np.array([eq_182_0(X, betas, t), eq_182_1(X, betas, t), eq_182_2(X, betas, t)])

def eq_183_0(X, betas, t):
    # dx_1/dt = [x_1(t)*sin(x_3(t)), x_1(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*np.sin(x_3)) + betas[1] * (x_1) + betas[2] * (x_1*x_3)

def eq_183_1(X, betas, t):
    # dx_2/dt = [x_1(t)*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.cos(x_2))

def eq_183_2(X, betas, t):
    # dx_3/dt = [x_2(t)*cos(x_1(t)), sin(x_3(t))/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_2*np.cos(x_1)) + betas[5] * (np.sin(x_3)/np.cos(x_2))

def system_183(X, betas, t):
    return np.array([eq_183_0(X, betas, t), eq_183_1(X, betas, t), eq_183_2(X, betas, t)])

def eq_184_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t), x_1(t)/x_2(t), x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2/x_1) + betas[1] * (x_1/x_2) + betas[2] * (x_1*x_2)

def eq_184_1(X, betas, t):
    # dx_2/dt = [x_1(t)*cos(x_3(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.cos(x_3)) + betas[4] * (np.cos(x_1))

def eq_184_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3) + betas[6] * (x_1*np.sin(x_3))

def system_184(X, betas, t):
    return np.array([eq_184_0(X, betas, t), eq_184_1(X, betas, t), eq_184_2(X, betas, t)])

def eq_185_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(x_1))

def eq_185_1(X, betas, t):
    # dx_2/dt = [x_2(t)*exp(-x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (x_2*np.exp(-x_3)) + betas[2] * (x_3)

def eq_185_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), exp(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_3)) + betas[4] * (np.exp(x_2)) + betas[5] * (x_3)

def system_185(X, betas, t):
    return np.array([eq_185_0(X, betas, t), eq_185_1(X, betas, t), eq_185_2(X, betas, t)])

def eq_186_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_2(t), x_1(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_2) + betas[2] * (x_1/x_2)

def eq_186_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_2)) + betas[4] * (x_3)

def eq_186_2(X, betas, t):
    # dx_3/dt = [cos(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_2)) + betas[6] * (x_1)

def system_186(X, betas, t):
    return np.array([eq_186_0(X, betas, t), eq_186_1(X, betas, t), eq_186_2(X, betas, t)])

def eq_187_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(x_1)) + betas[1] * (x_2)

def eq_187_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t)/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (x_2/np.cos(x_3))

def eq_187_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (x_3)

def system_187(X, betas, t):
    return np.array([eq_187_0(X, betas, t), eq_187_1(X, betas, t), eq_187_2(X, betas, t)])

def eq_188_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1/x_3)

def eq_188_1(X, betas, t):
    # dx_2/dt = [x_3(t)/sin(x_2(t)), sin(x_1(t)), x_1(t)/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_3/np.sin(x_2)) + betas[2] * (np.sin(x_1)) + betas[3] * (x_1/np.cos(x_3))

def eq_188_2(X, betas, t):
    # dx_3/dt = [cos(x_1(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.cos(x_1)) + betas[5] * (np.sin(x_3))

def system_188(X, betas, t):
    return np.array([eq_188_0(X, betas, t), eq_188_1(X, betas, t), eq_188_2(X, betas, t)])

def eq_189_0(X, betas, t):
    # dx_1/dt = [x_1(t)*cos(x_3(t)), x_1(t)/x_2(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*np.cos(x_3)) + betas[1] * (x_1/x_2) + betas[2] * (x_3)

def eq_189_1(X, betas, t):
    # dx_2/dt = [x_1(t)*cos(x_3(t)), exp(-x_2(t))*sin(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.cos(x_3)) + betas[4] * (np.exp(-x_2)*np.sin(x_3)) + betas[5] * (x_2)

def eq_189_2(X, betas, t):
    # dx_3/dt = [x_1(t)/x_2(t), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_1/x_2) + betas[7] * (x_1*np.sin(x_3))

def system_189(X, betas, t):
    return np.array([eq_189_0(X, betas, t), eq_189_1(X, betas, t), eq_189_2(X, betas, t)])

def eq_190_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)) + betas[1] * (x_1*x_3)

def eq_190_1(X, betas, t):
    # dx_2/dt = [cos(x_1(t)), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_1)) + betas[3] * (x_1/x_3)

def eq_190_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t)), sin(x_2(t))*cos(x_1(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_3)) + betas[5] * (np.sin(x_2)*np.cos(x_1)) + betas[6] * (np.cos(x_1))

def system_190(X, betas, t):
    return np.array([eq_190_0(X, betas, t), eq_190_1(X, betas, t), eq_190_2(X, betas, t)])

def eq_191_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t)), x_3(t), x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)) + betas[1] * (x_3) + betas[2] * (x_1*x_2)

def eq_191_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), sin(x_1(t))/x_2(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_3) + betas[4] * (np.sin(x_1)/x_2) + betas[5] * (np.sin(x_1))

def eq_191_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), x_2(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.cos(x_3)) + betas[7] * (x_2) + betas[8] * (np.exp(x_1))

def system_191(X, betas, t):
    return np.array([eq_191_0(X, betas, t), eq_191_1(X, betas, t), eq_191_2(X, betas, t)])

def eq_192_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t))*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)*np.sin(x_1))

def eq_192_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1*x_3)

def eq_192_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), sin(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1)) + betas[3] * (np.sin(x_3)) + betas[4] * (x_2)

def system_192(X, betas, t):
    return np.array([eq_192_0(X, betas, t), eq_192_1(X, betas, t), eq_192_2(X, betas, t)])

def eq_193_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1*np.exp(x_2))

def eq_193_1(X, betas, t):
    # dx_2/dt = [x_2(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2) + betas[3] * (np.exp(x_2))

def eq_193_2(X, betas, t):
    # dx_3/dt = [cos(x_2(t)), x_1(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.cos(x_2)) + betas[5] * (x_1/x_2)

def system_193(X, betas, t):
    return np.array([eq_193_0(X, betas, t), eq_193_1(X, betas, t), eq_193_2(X, betas, t)])

def eq_194_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))/sin(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)/np.sin(x_1)) + betas[1] * (x_3)

def eq_194_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), x_3(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*x_3) + betas[3] * (x_3) + betas[4] * (np.cos(x_1))

def eq_194_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), exp(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_1)*np.cos(x_2)) + betas[6] * (np.exp(x_1)) + betas[7] * (x_3)

def system_194(X, betas, t):
    return np.array([eq_194_0(X, betas, t), eq_194_1(X, betas, t), eq_194_2(X, betas, t)])

def eq_195_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_1(t)*x_2(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_1*x_2) + betas[2] * (np.sin(x_1))

def eq_195_1(X, betas, t):
    # dx_2/dt = [x_1(t), sin(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1) + betas[4] * (np.sin(x_2)) + betas[5] * (x_3)

def eq_195_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t))*cos(x_2(t)), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.sin(x_3)*np.cos(x_2)) + betas[7] * (x_3*np.sin(x_2))

def system_195(X, betas, t):
    return np.array([eq_195_0(X, betas, t), eq_195_1(X, betas, t), eq_195_2(X, betas, t)])

def eq_196_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), cos(x_1(t))/sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (np.cos(x_1)/np.sin(x_2))

def eq_196_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*cos(x_2(t)), exp(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1)*np.cos(x_2)) + betas[3] * (np.exp(x_1)) + betas[4] * (x_3)

def eq_196_2(X, betas, t):
    # dx_3/dt = [x_1(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1)

def system_196(X, betas, t):
    return np.array([eq_196_0(X, betas, t), eq_196_1(X, betas, t), eq_196_2(X, betas, t)])

def eq_197_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t)), x_3(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)) + betas[1] * (x_3) + betas[2] * (x_2)

def eq_197_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)) + betas[4] * (np.exp(x_3))

def eq_197_2(X, betas, t):
    # dx_3/dt = [x_2(t)*cos(x_3(t)), x_2(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_2*np.cos(x_3)) + betas[6] * (x_2) + betas[7] * (np.exp(x_2))

def system_197(X, betas, t):
    return np.array([eq_197_0(X, betas, t), eq_197_1(X, betas, t), eq_197_2(X, betas, t)])

def eq_198_0(X, betas, t):
    # dx_1/dt = [x_1(t)/cos(x_2(t)), cos(x_2(t)), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1/np.cos(x_2)) + betas[1] * (np.cos(x_2)) + betas[2] * (np.sin(x_1))

def eq_198_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_3(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1) + betas[4] * (x_3) + betas[5] * (np.exp(x_1))

def eq_198_2(X, betas, t):
    # dx_3/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_3)

def system_198(X, betas, t):
    return np.array([eq_198_0(X, betas, t), eq_198_1(X, betas, t), eq_198_2(X, betas, t)])

def eq_199_0(X, betas, t):
    # dx_1/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3)

def eq_199_1(X, betas, t):
    # dx_2/dt = [x_1(t)*sin(x_2(t)), x_1(t), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1*np.sin(x_2)) + betas[2] * (x_1) + betas[3] * (x_3*np.sin(x_2))

def eq_199_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), exp(x_2(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (np.exp(x_2)/x_3)

def system_199(X, betas, t):
    return np.array([eq_199_0(X, betas, t), eq_199_1(X, betas, t), eq_199_2(X, betas, t)])

def eq_200_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_2(t)*exp(x_3(t)), exp(x_2(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_2*np.exp(x_3)) + betas[2] * (np.exp(x_2)/x_3)

def eq_200_1(X, betas, t):
    # dx_2/dt = [x_1(t)*sin(x_2(t)), x_2(t), x_2(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.sin(x_2)) + betas[4] * (x_2) + betas[5] * (x_2*np.sin(x_3))

def eq_200_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (np.sin(x_1)*np.cos(x_2)) + betas[7] * (x_1/x_3)

def system_200(X, betas, t):
    return np.array([eq_200_0(X, betas, t), eq_200_1(X, betas, t), eq_200_2(X, betas, t)])

def eq_201_0(X, betas, t):
    # dx_1/dt = [exp(x_1(t))*exp(x_3(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_1)*np.exp(x_3)) + betas[1] * (np.exp(x_3))

def eq_201_1(X, betas, t):
    # dx_2/dt = [x_1(t), cos(x_3(t))/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (np.cos(x_3)/x_1)

def eq_201_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t)), x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_3)) + betas[5] * (x_3) + betas[6] * (x_1)

def system_201(X, betas, t):
    return np.array([eq_201_0(X, betas, t), eq_201_1(X, betas, t), eq_201_2(X, betas, t)])

def eq_202_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)) + betas[1] * (np.exp(x_3))

def eq_202_1(X, betas, t):
    # dx_2/dt = [cos(x_2(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_2)) + betas[3] * (np.exp(x_3))

def eq_202_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), x_2(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)) + betas[5] * (x_2*np.exp(x_1))

def system_202(X, betas, t):
    return np.array([eq_202_0(X, betas, t), eq_202_1(X, betas, t), eq_202_2(X, betas, t)])

def eq_203_0(X, betas, t):
    # dx_1/dt = [x_1(t)*exp(x_2(t)), x_1(t)/x_2(t), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*np.exp(x_2)) + betas[1] * (x_1/x_2) + betas[2] * (np.sin(x_2))

def eq_203_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)) + betas[4] * (np.exp(x_2))

def eq_203_2(X, betas, t):
    # dx_3/dt = [cos(x_2(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_2)) + betas[6] * (np.sin(x_3))

def system_203(X, betas, t):
    return np.array([eq_203_0(X, betas, t), eq_203_1(X, betas, t), eq_203_2(X, betas, t)])

def eq_204_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_3(t)/cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_3/np.cos(x_1))

def eq_204_1(X, betas, t):
    # dx_2/dt = [cos(x_2(t)), x_3(t), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_2)) + betas[3] * (x_3) + betas[4] * (x_1/x_3)

def eq_204_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_3)) + betas[6] * (x_2)

def system_204(X, betas, t):
    return np.array([eq_204_0(X, betas, t), eq_204_1(X, betas, t), eq_204_2(X, betas, t)])

def eq_205_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))*cos(x_1(t)), x_1(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)*np.cos(x_1)) + betas[1] * (x_1) + betas[2] * (x_1*x_3)

def eq_205_1(X, betas, t):
    # dx_2/dt = [x_2(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2*np.sin(x_3))

def eq_205_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t))/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_3)/np.cos(x_2))

def system_205(X, betas, t):
    return np.array([eq_205_0(X, betas, t), eq_205_1(X, betas, t), eq_205_2(X, betas, t)])

def eq_206_0(X, betas, t):
    # dx_1/dt = [x_2(t)*cos(x_1(t)), x_3(t), cos(x_1(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.cos(x_1)) + betas[1] * (x_3) + betas[2] * (np.cos(x_1)/x_3)

def eq_206_1(X, betas, t):
    # dx_2/dt = [x_3(t)*exp(x_2(t)), x_2(t), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3*np.exp(x_2)) + betas[4] * (x_2) + betas[5] * (x_3*np.sin(x_2))

def eq_206_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (np.sin(x_1)*np.cos(x_2)) + betas[7] * (x_1*x_3)

def system_206(X, betas, t):
    return np.array([eq_206_0(X, betas, t), eq_206_1(X, betas, t), eq_206_2(X, betas, t)])

def eq_207_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)*np.sin(x_1))

def eq_207_1(X, betas, t):
    # dx_2/dt = [sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (np.sin(x_2))

def eq_207_2(X, betas, t):
    # dx_3/dt = [x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2)

def system_207(X, betas, t):
    return np.array([eq_207_0(X, betas, t), eq_207_1(X, betas, t), eq_207_2(X, betas, t)])

def eq_208_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t)), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)) + betas[1] * (x_1*np.sin(x_3))

def eq_208_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2)

def eq_208_2(X, betas, t):
    # dx_3/dt = [x_1(t)*sin(x_3(t)), exp(x_1(t))*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.sin(x_3)) + betas[4] * (np.exp(x_1)*np.sin(x_3))

def system_208(X, betas, t):
    return np.array([eq_208_0(X, betas, t), eq_208_1(X, betas, t), eq_208_2(X, betas, t)])

def eq_209_0(X, betas, t):
    # dx_1/dt = [exp(x_1(t)), cos(x_2(t)), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_1)) + betas[1] * (np.cos(x_2)) + betas[2] * (np.sin(x_1))

def eq_209_1(X, betas, t):
    # dx_2/dt = [x_1(t), exp(x_1(t)), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1) + betas[4] * (np.exp(x_1)) + betas[5] * (np.sin(x_1))

def eq_209_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t))*cos(x_2(t)), x_1(t)*exp(-x_2(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.sin(x_3)*np.cos(x_2)) + betas[7] * (x_1*np.exp(-x_2))

def system_209(X, betas, t):
    return np.array([eq_209_0(X, betas, t), eq_209_1(X, betas, t), eq_209_2(X, betas, t)])

def eq_210_0(X, betas, t):
    # dx_1/dt = [exp(x_1(t)), x_1(t)*exp(x_2(t)), x_1(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_1)) + betas[1] * (x_1*np.exp(x_2)) + betas[2] * (x_1/x_2)

def eq_210_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t))/cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_2)/np.cos(x_1))

def eq_210_2(X, betas, t):
    # dx_3/dt = [x_3(t), cos(x_3(t)), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3) + betas[5] * (np.cos(x_3)) + betas[6] * (np.cos(x_2))

def system_210(X, betas, t):
    return np.array([eq_210_0(X, betas, t), eq_210_1(X, betas, t), eq_210_2(X, betas, t)])

def eq_211_0(X, betas, t):
    # dx_1/dt = [sin(x_2(t))*cos(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_2)*np.cos(x_3)) + betas[1] * (x_1)

def eq_211_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*x_3) + betas[3] * (x_1*np.sin(x_3))

def eq_211_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), sin(x_3(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_1)) + betas[5] * (np.sin(x_3)) + betas[6] * (x_1*x_3)

def system_211(X, betas, t):
    return np.array([eq_211_0(X, betas, t), eq_211_1(X, betas, t), eq_211_2(X, betas, t)])

def eq_212_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))/x_3(t), x_1(t), x_3(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)/x_3) + betas[1] * (x_1) + betas[2] * (x_3/x_2)

def eq_212_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1)

def eq_212_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t))/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_3)/np.cos(x_2))

def system_212(X, betas, t):
    return np.array([eq_212_0(X, betas, t), eq_212_1(X, betas, t), eq_212_2(X, betas, t)])

def eq_213_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_1(t)*x_2(t), cos(x_2(t))/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_1*x_2) + betas[2] * (np.cos(x_2)/np.cos(x_3))

def eq_213_1(X, betas, t):
    # dx_2/dt = [x_1(t)*exp(-x_2(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.exp(-x_2)) + betas[4] * (np.cos(x_1))

def eq_213_2(X, betas, t):
    # dx_3/dt = [x_1(t)*cos(x_3(t)), sin(x_1(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*np.cos(x_3)) + betas[6] * (np.sin(x_1)) + betas[7] * (np.exp(x_1))

def system_213(X, betas, t):
    return np.array([eq_213_0(X, betas, t), eq_213_1(X, betas, t), eq_213_2(X, betas, t)])

def eq_214_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_3))

def eq_214_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2) + betas[3] * (x_3*np.sin(x_2))

def eq_214_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_3))

def system_214(X, betas, t):
    return np.array([eq_214_0(X, betas, t), eq_214_1(X, betas, t), eq_214_2(X, betas, t)])

def eq_215_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_3(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_3) + betas[1] * (x_3)

def eq_215_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*cos(x_2(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1)*np.cos(x_2)) + betas[3] * (np.exp(x_1))

def eq_215_2(X, betas, t):
    # dx_3/dt = [sin(x_2(t)), x_1(t)/sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_2)) + betas[5] * (x_1/np.sin(x_2))

def system_215(X, betas, t):
    return np.array([eq_215_0(X, betas, t), eq_215_1(X, betas, t), eq_215_2(X, betas, t)])

def eq_216_0(X, betas, t):
    # dx_1/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3)

def eq_216_1(X, betas, t):
    # dx_2/dt = [x_1(t)*sin(x_2(t)), x_2(t), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1*np.sin(x_2)) + betas[2] * (x_2) + betas[3] * (np.sin(x_2))

def eq_216_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (x_1)

def system_216(X, betas, t):
    return np.array([eq_216_0(X, betas, t), eq_216_1(X, betas, t), eq_216_2(X, betas, t)])

def eq_217_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t))*exp(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)*np.exp(x_3)) + betas[1] * (x_1)

def eq_217_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*x_3) + betas[3] * (x_1)

def eq_217_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), cos(x_1(t))*cos(x_3(t)), x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_1)) + betas[5] * (np.cos(x_1)*np.cos(x_3)) + betas[6] * (x_1/x_3)

def system_217(X, betas, t):
    return np.array([eq_217_0(X, betas, t), eq_217_1(X, betas, t), eq_217_2(X, betas, t)])

def eq_218_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2))

def eq_218_1(X, betas, t):
    # dx_2/dt = [x_3(t), x_1(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_3) + betas[2] * (x_1) + betas[3] * (np.exp(x_2))

def eq_218_2(X, betas, t):
    # dx_3/dt = [x_1(t)*exp(-x_2(t)), x_3(t)/x_1(t), x_1(t)*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1*np.exp(-x_2)) + betas[5] * (x_3/x_1) + betas[6] * (x_1*np.cos(x_2))

def system_218(X, betas, t):
    return np.array([eq_218_0(X, betas, t), eq_218_1(X, betas, t), eq_218_2(X, betas, t)])

def eq_219_0(X, betas, t):
    # dx_1/dt = [x_2(t)*cos(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.cos(x_1)) + betas[1] * (x_3)

def eq_219_1(X, betas, t):
    # dx_2/dt = [x_3(t), x_2(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3) + betas[3] * (x_2*np.exp(x_1))

def eq_219_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), exp(x_2(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (np.exp(x_2)) + betas[6] * (x_2)

def system_219(X, betas, t):
    return np.array([eq_219_0(X, betas, t), eq_219_1(X, betas, t), eq_219_2(X, betas, t)])

def eq_220_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))*sin(x_2(t)), cos(x_1(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)*np.sin(x_2)) + betas[1] * (np.cos(x_1)) + betas[2] * (np.sin(x_3))

def eq_220_1(X, betas, t):
    # dx_2/dt = [x_3(t), exp(x_1(t))*exp(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3) + betas[4] * (np.exp(x_1)*np.exp(x_2)) + betas[5] * (x_1)

def eq_220_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_1(t), x_3(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_3) + betas[7] * (x_1) + betas[8] * (x_3*np.exp(x_1))

def system_220(X, betas, t):
    return np.array([eq_220_0(X, betas, t), eq_220_1(X, betas, t), eq_220_2(X, betas, t)])

def eq_221_0(X, betas, t):
    # dx_1/dt = [x_1(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.sin(x_3))

def eq_221_1(X, betas, t):
    # dx_2/dt = [x_1(t)*sin(x_2(t)), sin(x_1(t)), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*np.sin(x_2)) + betas[3] * (np.sin(x_1)) + betas[4] * (x_3*np.sin(x_2))

def eq_221_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.exp(x_1)) + betas[6] * (np.sin(x_3))

def system_221(X, betas, t):
    return np.array([eq_221_0(X, betas, t), eq_221_1(X, betas, t), eq_221_2(X, betas, t)])

def eq_222_0(X, betas, t):
    # dx_1/dt = [x_3(t), sin(x_1(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3) + betas[1] * (np.sin(x_1)) + betas[2] * (np.sin(x_3))

def eq_222_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_3(t), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*x_2) + betas[4] * (x_3) + betas[5] * (np.cos(x_3))

def eq_222_2(X, betas, t):
    # dx_3/dt = [x_2(t)/cos(x_3(t)), x_1(t)*x_3(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_2/np.cos(x_3)) + betas[7] * (x_1*x_3) + betas[8] * (x_2)

def system_222(X, betas, t):
    return np.array([eq_222_0(X, betas, t), eq_222_1(X, betas, t), eq_222_2(X, betas, t)])

def eq_223_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)) + betas[1] * (x_1*x_3)

def eq_223_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_3(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1/x_3) + betas[3] * (x_1*x_3)

def eq_223_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t)), x_1(t)/x_3(t), sin(x_2(t))*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_3)) + betas[5] * (x_1/x_3) + betas[6] * (np.sin(x_2)*np.cos(x_1))

def system_223(X, betas, t):
    return np.array([eq_223_0(X, betas, t), eq_223_1(X, betas, t), eq_223_2(X, betas, t)])

def eq_224_0(X, betas, t):
    # dx_1/dt = [x_2(t)*sin(x_1(t)), x_2(t)/sin(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.sin(x_1)) + betas[1] * (x_2/np.sin(x_3)) + betas[2] * (x_1)

def eq_224_1(X, betas, t):
    # dx_2/dt = [sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_3))

def eq_224_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t)), sin(x_2(t)), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_3)) + betas[5] * (np.sin(x_2)) + betas[6] * (np.cos(x_2))

def system_224(X, betas, t):
    return np.array([eq_224_0(X, betas, t), eq_224_1(X, betas, t), eq_224_2(X, betas, t)])

def eq_225_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t)), exp(x_3(t))/sin(x_1(t)), x_2(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)) + betas[1] * (np.exp(x_3)/np.sin(x_1)) + betas[2] * (x_2*np.exp(x_1))

def eq_225_1(X, betas, t):
    # dx_2/dt = [sin(x_3(t)), cos(x_2(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_3)) + betas[4] * (np.cos(x_2)) + betas[5] * (np.exp(x_3))

def eq_225_2(X, betas, t):
    # dx_3/dt = [cos(x_1(t)), x_3(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.cos(x_1)) + betas[7] * (x_3) + betas[8] * (np.exp(x_2))

def system_225(X, betas, t):
    return np.array([eq_225_0(X, betas, t), eq_225_1(X, betas, t), eq_225_2(X, betas, t)])

def eq_226_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))/x_3(t), x_1(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)/x_3) + betas[1] * (x_1) + betas[2] * (np.sin(x_3))

def eq_226_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2) + betas[4] * (x_3)

def eq_226_2(X, betas, t):
    # dx_3/dt = [x_1(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1) + betas[6] * (x_2)

def system_226(X, betas, t):
    return np.array([eq_226_0(X, betas, t), eq_226_1(X, betas, t), eq_226_2(X, betas, t)])

def eq_227_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))/x_3(t), sin(x_3(t))/sin(x_2(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)/x_3) + betas[1] * (np.sin(x_3)/np.sin(x_2)) + betas[2] * (x_1*x_3)

def eq_227_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_1))

def eq_227_2(X, betas, t):
    # dx_3/dt = [x_2(t)*x_3(t), sin(x_3(t))/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_2*x_3) + betas[5] * (np.sin(x_3)/np.cos(x_2))

def system_227(X, betas, t):
    return np.array([eq_227_0(X, betas, t), eq_227_1(X, betas, t), eq_227_2(X, betas, t)])

def eq_228_0(X, betas, t):
    # dx_1/dt = [sin(x_2(t)), cos(x_2(t)), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_2)) + betas[1] * (np.cos(x_2)) + betas[2] * (np.sin(x_1))

def eq_228_1(X, betas, t):
    # dx_2/dt = [x_1(t), exp(x_1(t)), x_3(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1) + betas[4] * (np.exp(x_1)) + betas[5] * (x_3*np.exp(x_1))

def eq_228_2(X, betas, t):
    # dx_3/dt = [sin(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (np.sin(x_2)) + betas[7] * (x_3)

def system_228(X, betas, t):
    return np.array([eq_228_0(X, betas, t), eq_228_1(X, betas, t), eq_228_2(X, betas, t)])

def eq_229_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_1(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_1)) + betas[2] * (np.sin(x_3))

def eq_229_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*exp(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)*np.exp(x_3)) + betas[4] * (x_2)

def eq_229_2(X, betas, t):
    # dx_3/dt = [x_2(t), x_3(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_2) + betas[6] * (x_3) + betas[7] * (np.sin(x_1))

def system_229(X, betas, t):
    return np.array([eq_229_0(X, betas, t), eq_229_1(X, betas, t), eq_229_2(X, betas, t)])

def eq_230_0(X, betas, t):
    # dx_1/dt = [exp(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_1)) + betas[1] * (x_3)

def eq_230_1(X, betas, t):
    # dx_2/dt = [cos(x_3(t)), sin(x_1(t))*sin(x_2(t)), exp(x_2(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_3)) + betas[3] * (np.sin(x_1)*np.sin(x_2)) + betas[4] * (np.exp(x_2)/x_3)

def eq_230_2(X, betas, t):
    # dx_3/dt = [x_1(t)*exp(x_2(t)), cos(x_1(t))/sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*np.exp(x_2)) + betas[6] * (np.cos(x_1)/np.sin(x_2))

def system_230(X, betas, t):
    return np.array([eq_230_0(X, betas, t), eq_230_1(X, betas, t), eq_230_2(X, betas, t)])

def eq_231_0(X, betas, t):
    # dx_1/dt = [x_3(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3) + betas[1] * (np.cos(x_1))

def eq_231_1(X, betas, t):
    # dx_2/dt = [x_1(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (np.cos(x_1))

def eq_231_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*cos(x_2(t)), exp(x_2(t)), x_1(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.cos(x_2)) + betas[5] * (np.exp(x_2)) + betas[6] * (x_1/x_2)

def system_231(X, betas, t):
    return np.array([eq_231_0(X, betas, t), eq_231_1(X, betas, t), eq_231_2(X, betas, t)])

def eq_232_0(X, betas, t):
    # dx_1/dt = [cos(x_2(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_2)) + betas[1] * (x_2)

def eq_232_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_3(t), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*x_3) + betas[3] * (np.exp(x_3))

def eq_232_2(X, betas, t):
    # dx_3/dt = [x_2(t), cos(x_2(t)), x_3(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_2) + betas[5] * (np.cos(x_2)) + betas[6] * (x_3*np.exp(x_2))

def system_232(X, betas, t):
    return np.array([eq_232_0(X, betas, t), eq_232_1(X, betas, t), eq_232_2(X, betas, t)])

def eq_233_0(X, betas, t):
    # dx_1/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3)

def eq_233_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1) + betas[2] * (x_2) + betas[3] * (x_3*np.sin(x_2))

def eq_233_2(X, betas, t):
    # dx_3/dt = [x_2(t)/x_1(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_2/x_1) + betas[5] * (np.sin(x_3))

def system_233(X, betas, t):
    return np.array([eq_233_0(X, betas, t), eq_233_1(X, betas, t), eq_233_2(X, betas, t)])

def eq_234_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_3(t)*exp(x_1(t)), x_3(t)/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_3*np.exp(x_1)) + betas[2] * (x_3/np.cos(x_2))

def eq_234_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), sin(x_1(t)), x_2(t)/cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)) + betas[4] * (np.sin(x_1)) + betas[5] * (x_2/np.cos(x_1))

def eq_234_2(X, betas, t):
    # dx_3/dt = [x_1(t), x_3(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_1) + betas[7] * (x_3) + betas[8] * (np.sin(x_3))

def system_234(X, betas, t):
    return np.array([eq_234_0(X, betas, t), eq_234_1(X, betas, t), eq_234_2(X, betas, t)])

def eq_235_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_1(t))/x_3(t), x_1(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_1)/x_3) + betas[2] * (x_1*np.exp(x_2))

def eq_235_1(X, betas, t):
    # dx_2/dt = [x_1(t)*cos(x_3(t)), sin(x_2(t))*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.cos(x_3)) + betas[4] * (np.sin(x_2)*np.sin(x_3))

def eq_235_2(X, betas, t):
    # dx_3/dt = [x_3(t)/sin(x_1(t)), sin(x_1(t)), x_2(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3/np.sin(x_1)) + betas[6] * (np.sin(x_1)) + betas[7] * (x_2*np.sin(x_1))

def system_235(X, betas, t):
    return np.array([eq_235_0(X, betas, t), eq_235_1(X, betas, t), eq_235_2(X, betas, t)])

def eq_236_0(X, betas, t):
    # dx_1/dt = [x_1(t)*exp(x_2(t)), x_1(t)/x_2(t), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*np.exp(x_2)) + betas[1] * (x_1/x_2) + betas[2] * (np.exp(x_3))

def eq_236_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t)), x_2(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_2)) + betas[4] * (x_2/x_3)

def eq_236_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_3))

def system_236(X, betas, t):
    return np.array([eq_236_0(X, betas, t), eq_236_1(X, betas, t), eq_236_2(X, betas, t)])

def eq_237_0(X, betas, t):
    # dx_1/dt = [exp(-x_2(t))*sin(x_3(t)), x_2(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(-x_2)*np.sin(x_3)) + betas[1] * (x_2/x_3)

def eq_237_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*cos(x_2(t)), x_1(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1)*np.cos(x_2)) + betas[3] * (x_1) + betas[4] * (x_2)

def eq_237_2(X, betas, t):
    # dx_3/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3)

def system_237(X, betas, t):
    return np.array([eq_237_0(X, betas, t), eq_237_1(X, betas, t), eq_237_2(X, betas, t)])

def eq_238_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (x_1*np.sin(x_3))

def eq_238_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (x_2)

def eq_238_2(X, betas, t):
    # dx_3/dt = [x_3(t)*cos(x_2(t)), x_2(t), cos(x_2(t))*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3*np.cos(x_2)) + betas[5] * (x_2) + betas[6] * (np.cos(x_2)*np.cos(x_3))

def system_238(X, betas, t):
    return np.array([eq_238_0(X, betas, t), eq_238_1(X, betas, t), eq_238_2(X, betas, t)])

def eq_239_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t)), x_1(t), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)) + betas[1] * (x_1) + betas[2] * (x_1*x_3)

def eq_239_1(X, betas, t):
    # dx_2/dt = [sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_2))

def eq_239_2(X, betas, t):
    # dx_3/dt = [x_1(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1) + betas[5] * (np.exp(x_1))

def system_239(X, betas, t):
    return np.array([eq_239_0(X, betas, t), eq_239_1(X, betas, t), eq_239_2(X, betas, t)])

def eq_240_0(X, betas, t):
    # dx_1/dt = [x_3(t), exp(x_2(t))/cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3) + betas[1] * (np.exp(x_2)/np.cos(x_1))

def eq_240_1(X, betas, t):
    # dx_2/dt = [x_2(t), cos(x_1(t)), x_1(t)*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2) + betas[3] * (np.cos(x_1)) + betas[4] * (x_1*np.cos(x_2))

def eq_240_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_3(t), exp(x_2(t))/cos(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*x_3) + betas[6] * (np.exp(x_2)/np.cos(x_1)) + betas[7] * (x_3)

def system_240(X, betas, t):
    return np.array([eq_240_0(X, betas, t), eq_240_1(X, betas, t), eq_240_2(X, betas, t)])

def eq_241_0(X, betas, t):
    # dx_1/dt = [x_1(t)*exp(-x_2(t)), exp(x_2(t))/x_1(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*np.exp(-x_2)) + betas[1] * (np.exp(x_2)/x_1) + betas[2] * (x_2)

def eq_241_1(X, betas, t):
    # dx_2/dt = [x_1(t)*exp(-x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.exp(-x_3)) + betas[4] * (x_3)

def eq_241_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_2(t), exp(x_1(t))*cos(x_2(t)), x_1(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*x_2) + betas[6] * (np.exp(x_1)*np.cos(x_2)) + betas[7] * (x_1/x_2)

def system_241(X, betas, t):
    return np.array([eq_241_0(X, betas, t), eq_241_1(X, betas, t), eq_241_2(X, betas, t)])

def eq_242_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3))

def eq_242_1(X, betas, t):
    # dx_2/dt = [x_1(t), exp(x_1(t)), exp(x_3(t))*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1) + betas[2] * (np.exp(x_1)) + betas[3] * (np.exp(x_3)*np.cos(x_2))

def eq_242_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.cos(x_3)) + betas[5] * (x_1)

def system_242(X, betas, t):
    return np.array([eq_242_0(X, betas, t), eq_242_1(X, betas, t), eq_242_2(X, betas, t)])

def eq_243_0(X, betas, t):
    # dx_1/dt = [x_3(t), cos(x_3(t)), x_2(t)*exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3) + betas[1] * (np.cos(x_3)) + betas[2] * (x_2*np.exp(x_3))

def eq_243_1(X, betas, t):
    # dx_2/dt = [cos(x_2(t)), exp(x_3(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_2)) + betas[4] * (np.exp(x_3)) + betas[5] * (np.exp(x_1))

def eq_243_2(X, betas, t):
    # dx_3/dt = [exp(-x_2(t))*sin(x_3(t)), x_1(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (np.exp(-x_2)*np.sin(x_3)) + betas[7] * (x_1) + betas[8] * (x_2)

def system_243(X, betas, t):
    return np.array([eq_243_0(X, betas, t), eq_243_1(X, betas, t), eq_243_2(X, betas, t)])

def eq_244_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t)), x_3(t)/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)) + betas[1] * (x_3/x_1)

def eq_244_1(X, betas, t):
    # dx_2/dt = [x_3(t)*exp(x_2(t)), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3*np.exp(x_2)) + betas[3] * (np.sin(x_2))

def eq_244_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t)), exp(x_2(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_3)) + betas[5] * (np.exp(x_2)/x_3)

def system_244(X, betas, t):
    return np.array([eq_244_0(X, betas, t), eq_244_1(X, betas, t), eq_244_2(X, betas, t)])

def eq_245_0(X, betas, t):
    # dx_1/dt = [x_3(t)/cos(x_1(t)), x_2(t), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3/np.cos(x_1)) + betas[1] * (x_2) + betas[2] * (np.exp(x_3))

def eq_245_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t), x_3(t)*cos(x_1(t)), x_3(t)/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1/x_2) + betas[4] * (x_3*np.cos(x_1)) + betas[5] * (x_3/x_1)

def eq_245_2(X, betas, t):
    # dx_3/dt = [x_1(t)*cos(x_2(t)), x_3(t)*exp(-x_1(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_1*np.cos(x_2)) + betas[7] * (x_3*np.exp(-x_1))

def system_245(X, betas, t):
    return np.array([eq_245_0(X, betas, t), eq_245_1(X, betas, t), eq_245_2(X, betas, t)])

def eq_246_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t)), x_3(t)*sin(x_2(t)), cos(x_1(t))/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)) + betas[1] * (x_3*np.sin(x_2)) + betas[2] * (np.cos(x_1)/np.cos(x_2))

def eq_246_1(X, betas, t):
    # dx_2/dt = [exp(x_3(t)), cos(x_2(t))/x_1(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_3)) + betas[4] * (np.cos(x_2)/x_1) + betas[5] * (np.sin(x_1))

def eq_246_2(X, betas, t):
    # dx_3/dt = [x_2(t)*sin(x_3(t)), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_2*np.sin(x_3)) + betas[7] * (np.exp(x_2))

def system_246(X, betas, t):
    return np.array([eq_246_0(X, betas, t), eq_246_1(X, betas, t), eq_246_2(X, betas, t)])

def eq_247_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t)), x_1(t)*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)) + betas[1] * (x_1*np.cos(x_2))

def eq_247_1(X, betas, t):
    # dx_2/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3)

def eq_247_2(X, betas, t):
    # dx_3/dt = [exp(x_2(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_2)) + betas[4] * (x_1*x_3)

def system_247(X, betas, t):
    return np.array([eq_247_0(X, betas, t), eq_247_1(X, betas, t), eq_247_2(X, betas, t)])

def eq_248_0(X, betas, t):
    # dx_1/dt = [cos(x_3(t))/sin(x_1(t)), x_3(t)*exp(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_3)/np.sin(x_1)) + betas[1] * (x_3*np.exp(x_2)) + betas[2] * (x_1)

def eq_248_1(X, betas, t):
    # dx_2/dt = [x_3(t), x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3) + betas[4] * (x_1*x_2)

def eq_248_2(X, betas, t):
    # dx_3/dt = [sin(x_2(t)), x_2(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_2)) + betas[6] * (x_2*x_3)

def system_248(X, betas, t):
    return np.array([eq_248_0(X, betas, t), eq_248_1(X, betas, t), eq_248_2(X, betas, t)])

def eq_249_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_3(t), cos(x_1(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2/x_3) + betas[1] * (np.cos(x_1)) + betas[2] * (np.sin(x_3))

def eq_249_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t)), x_3(t)/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_2)) + betas[4] * (x_3/x_1)

def eq_249_2(X, betas, t):
    # dx_3/dt = [x_2(t), x_1(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_2) + betas[6] * (x_1*np.exp(x_2))

def system_249(X, betas, t):
    return np.array([eq_249_0(X, betas, t), eq_249_1(X, betas, t), eq_249_2(X, betas, t)])

def eq_250_0(X, betas, t):
    # dx_1/dt = [cos(x_2(t))/x_1(t), x_3(t)*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_2)/x_1) + betas[1] * (x_3*np.cos(x_1))

def eq_250_1(X, betas, t):
    # dx_2/dt = [exp(-x_3(t))*cos(x_2(t)), sin(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(-x_3)*np.cos(x_2)) + betas[3] * (np.sin(x_3)) + betas[4] * (x_2)

def eq_250_2(X, betas, t):
    # dx_3/dt = [exp(x_2(t))/x_1(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.exp(x_2)/x_1) + betas[6] * (np.sin(x_1))

def system_250(X, betas, t):
    return np.array([eq_250_0(X, betas, t), eq_250_1(X, betas, t), eq_250_2(X, betas, t)])

def eq_251_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t)), cos(x_2(t)), x_3(t)/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)) + betas[1] * (np.cos(x_2)) + betas[2] * (x_3/np.cos(x_2))

def eq_251_1(X, betas, t):
    # dx_2/dt = [x_1(t)/sin(x_3(t)), x_3(t), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1/np.sin(x_3)) + betas[4] * (x_3) + betas[5] * (np.cos(x_2))

def eq_251_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t)), x_2(t), exp(x_2(t))*exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.sin(x_3)) + betas[7] * (x_2) + betas[8] * (np.exp(x_2)*np.exp(x_3))

def system_251(X, betas, t):
    return np.array([eq_251_0(X, betas, t), eq_251_1(X, betas, t), eq_251_2(X, betas, t)])

def eq_252_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1) + betas[2] * (x_3)

def eq_252_1(X, betas, t):
    # dx_2/dt = [x_3(t)*exp(-x_2(t)), cos(x_2(t))/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3*np.exp(-x_2)) + betas[4] * (np.cos(x_2)/x_1)

def eq_252_2(X, betas, t):
    # dx_3/dt = [x_2(t), x_1(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_2) + betas[6] * (x_1) + betas[7] * (np.cos(x_1))

def system_252(X, betas, t):
    return np.array([eq_252_0(X, betas, t), eq_252_1(X, betas, t), eq_252_2(X, betas, t)])

def eq_253_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))/x_1(t), sin(x_2(t)), x_3(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)/x_1) + betas[1] * (np.sin(x_2)) + betas[2] * (x_3*np.sin(x_1))

def eq_253_1(X, betas, t):
    # dx_2/dt = [cos(x_3(t)), x_1(t)/x_2(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_3)) + betas[4] * (x_1/x_2) + betas[5] * (x_2)

def eq_253_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_3(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_1*x_3) + betas[7] * (x_2)

def system_253(X, betas, t):
    return np.array([eq_253_0(X, betas, t), eq_253_1(X, betas, t), eq_253_2(X, betas, t)])

def eq_254_0(X, betas, t):
    # dx_1/dt = [x_2(t)*sin(x_1(t)), x_3(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.sin(x_1)) + betas[1] * (x_3) + betas[2] * (np.cos(x_1))

def eq_254_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t)), sin(x_2(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)) + betas[4] * (np.sin(x_2)) + betas[5] * (x_2)

def eq_254_2(X, betas, t):
    # dx_3/dt = [x_1(t), cos(x_2(t))*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_1) + betas[7] * (np.cos(x_2)*np.cos(x_3))

def system_254(X, betas, t):
    return np.array([eq_254_0(X, betas, t), eq_254_1(X, betas, t), eq_254_2(X, betas, t)])

def eq_255_0(X, betas, t):
    # dx_1/dt = [x_1(t), cos(x_3(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.cos(x_3)) + betas[2] * (np.cos(x_1))

def eq_255_1(X, betas, t):
    # dx_2/dt = [cos(x_3(t))/x_2(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_3)/x_2) + betas[4] * (np.exp(x_1))

def eq_255_2(X, betas, t):
    # dx_3/dt = [exp(x_2(t))*sin(x_3(t)), x_2(t), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.exp(x_2)*np.sin(x_3)) + betas[6] * (x_2) + betas[7] * (np.cos(x_2))

def system_255(X, betas, t):
    return np.array([eq_255_0(X, betas, t), eq_255_1(X, betas, t), eq_255_2(X, betas, t)])

def eq_256_0(X, betas, t):
    # dx_1/dt = [x_2(t)*exp(-x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.exp(-x_1)) + betas[1] * (x_1)

def eq_256_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t))*sin(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_2)*np.sin(x_1)) + betas[3] * (x_2)

def eq_256_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_2(t), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1*x_2) + betas[5] * (np.sin(x_3))

def system_256(X, betas, t):
    return np.array([eq_256_0(X, betas, t), eq_256_1(X, betas, t), eq_256_2(X, betas, t)])

def eq_257_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t)), x_3(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)) + betas[1] * (x_3) + betas[2] * (x_2)

def eq_257_1(X, betas, t):
    # dx_2/dt = [x_2(t), exp(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2) + betas[4] * (np.exp(x_1)) + betas[5] * (x_3)

def eq_257_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t)), x_2(t)/x_1(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.sin(x_3)) + betas[7] * (x_2/x_1) + betas[8] * (np.exp(x_2))

def system_257(X, betas, t):
    return np.array([eq_257_0(X, betas, t), eq_257_1(X, betas, t), eq_257_2(X, betas, t)])

def eq_258_0(X, betas, t):
    # dx_1/dt = [exp(x_1(t))*cos(x_3(t)), sin(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_1)*np.cos(x_3)) + betas[1] * (np.sin(x_3)) + betas[2] * (x_2)

def eq_258_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t)), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_1)) + betas[4] * (np.exp(x_2))

def eq_258_2(X, betas, t):
    # dx_3/dt = [x_1(t)*exp(x_2(t)), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1*np.exp(x_2)) + betas[6] * (np.exp(x_3))

def system_258(X, betas, t):
    return np.array([eq_258_0(X, betas, t), eq_258_1(X, betas, t), eq_258_2(X, betas, t)])

def eq_259_0(X, betas, t):
    # dx_1/dt = [x_2(t), sin(x_1(t))/sin(x_3(t)), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2) + betas[1] * (np.sin(x_1)/np.sin(x_3)) + betas[2] * (x_1*np.sin(x_3))

def eq_259_1(X, betas, t):
    # dx_2/dt = [x_2(t), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2) + betas[4] * (np.sin(x_2))

def eq_259_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t))*sin(x_3(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.exp(x_1)*np.sin(x_3)) + betas[6] * (np.sin(x_3))

def system_259(X, betas, t):
    return np.array([eq_259_0(X, betas, t), eq_259_1(X, betas, t), eq_259_2(X, betas, t)])

def eq_260_0(X, betas, t):
    # dx_1/dt = [x_1(t)*exp(x_3(t)), x_1(t)*x_3(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*np.exp(x_3)) + betas[1] * (x_1*x_3) + betas[2] * (x_2)

def eq_260_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t)), exp(x_1(t)), sin(x_2(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_1)) + betas[4] * (np.exp(x_1)) + betas[5] * (np.sin(x_2)/x_3)

def eq_260_2(X, betas, t):
    # dx_3/dt = [x_3(t), cos(x_1(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_3) + betas[7] * (np.cos(x_1)) + betas[8] * (np.exp(x_1))

def system_260(X, betas, t):
    return np.array([eq_260_0(X, betas, t), eq_260_1(X, betas, t), eq_260_2(X, betas, t)])

def eq_261_0(X, betas, t):
    # dx_1/dt = [sin(x_2(t))/x_3(t), x_3(t)*sin(x_1(t)), x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_2)/x_3) + betas[1] * (x_3*np.sin(x_1)) + betas[2] * (x_1*x_2)

def eq_261_1(X, betas, t):
    # dx_2/dt = [x_3(t), x_1(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3) + betas[4] * (x_1*np.cos(x_3))

def eq_261_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))/x_3(t), x_1(t)*x_3(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_1)/x_3) + betas[6] * (x_1*x_3) + betas[7] * (x_2)

def system_261(X, betas, t):
    return np.array([eq_261_0(X, betas, t), eq_261_1(X, betas, t), eq_261_2(X, betas, t)])

def eq_262_0(X, betas, t):
    # dx_1/dt = [sin(x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_3)) + betas[1] * (x_3)

def eq_262_1(X, betas, t):
    # dx_2/dt = [cos(x_3(t)), x_2(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_3)) + betas[3] * (x_2) + betas[4] * (np.exp(x_2))

def eq_262_2(X, betas, t):
    # dx_3/dt = [x_2(t)/x_1(t), x_3(t), x_1(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (x_2/x_1) + betas[6] * (x_3) + betas[7] * (x_1*np.cos(x_3))

def system_262(X, betas, t):
    return np.array([eq_262_0(X, betas, t), eq_262_1(X, betas, t), eq_262_2(X, betas, t)])

def eq_263_0(X, betas, t):
    # dx_1/dt = [cos(x_3(t)), exp(x_1(t))*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_3)) + betas[1] * (np.exp(x_1)*np.sin(x_2))

def eq_263_1(X, betas, t):
    # dx_2/dt = [x_1(t), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (np.cos(x_2))

def eq_263_2(X, betas, t):
    # dx_3/dt = [x_3(t)*cos(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3*np.cos(x_2)) + betas[5] * (x_3)

def system_263(X, betas, t):
    return np.array([eq_263_0(X, betas, t), eq_263_1(X, betas, t), eq_263_2(X, betas, t)])

def eq_264_0(X, betas, t):
    # dx_1/dt = [sin(x_2(t)), cos(x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_2)) + betas[1] * (np.cos(x_3)) + betas[2] * (x_3)

def eq_264_1(X, betas, t):
    # dx_2/dt = [sin(x_2(t))*sin(x_3(t)), x_3(t)*exp(x_1(t)), x_1(t)*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_2)*np.sin(x_3)) + betas[4] * (x_3*np.exp(x_1)) + betas[5] * (x_1*np.cos(x_3))

def eq_264_2(X, betas, t):
    # dx_3/dt = [x_3(t)/cos(x_2(t)), x_3(t)/sin(x_1(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_3/np.cos(x_2)) + betas[7] * (x_3/np.sin(x_1)) + betas[8] * (x_1*x_3)

def system_264(X, betas, t):
    return np.array([eq_264_0(X, betas, t), eq_264_1(X, betas, t), eq_264_2(X, betas, t)])

def eq_265_0(X, betas, t):
    # dx_1/dt = [x_1(t)/cos(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1/np.cos(x_2)) + betas[1] * (x_3)

def eq_265_1(X, betas, t):
    # dx_2/dt = [x_3(t)/x_2(t), x_3(t)*sin(x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3/x_2) + betas[3] * (x_3*np.sin(x_1)) + betas[4] * (x_1)

def eq_265_2(X, betas, t):
    # dx_3/dt = [cos(x_2(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.cos(x_2)) + betas[6] * (np.sin(x_3))

def system_265(X, betas, t):
    return np.array([eq_265_0(X, betas, t), eq_265_1(X, betas, t), eq_265_2(X, betas, t)])

def eq_266_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t))*sin(x_3(t)), sin(x_2(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)*np.sin(x_3)) + betas[1] * (np.sin(x_2)) + betas[2] * (np.sin(x_3))

def eq_266_1(X, betas, t):
    # dx_2/dt = [x_3(t)/sin(x_1(t)), x_3(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3/np.sin(x_1)) + betas[4] * (x_3*np.exp(x_2))

def eq_266_2(X, betas, t):
    # dx_3/dt = [x_1(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1) + betas[6] * (x_2)

def system_266(X, betas, t):
    return np.array([eq_266_0(X, betas, t), eq_266_1(X, betas, t), eq_266_2(X, betas, t)])

def eq_267_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)) + betas[1] * (x_2)

def eq_267_1(X, betas, t):
    # dx_2/dt = [exp(x_3(t))/x_2(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_3)/x_2) + betas[3] * (x_3)

def eq_267_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t)), x_3(t)/cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_3)) + betas[5] * (x_3/np.cos(x_1))

def system_267(X, betas, t):
    return np.array([eq_267_0(X, betas, t), eq_267_1(X, betas, t), eq_267_2(X, betas, t)])

def eq_268_0(X, betas, t):
    # dx_1/dt = [exp(x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_1)) + betas[1] * (x_1)

def eq_268_1(X, betas, t):
    # dx_2/dt = [x_2(t)*exp(x_1(t)), x_3(t)/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2*np.exp(x_1)) + betas[3] * (x_3/x_1)

def eq_268_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), x_2(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_1)) + betas[5] * (x_2/x_3)

def system_268(X, betas, t):
    return np.array([eq_268_0(X, betas, t), eq_268_1(X, betas, t), eq_268_2(X, betas, t)])

def eq_269_0(X, betas, t):
    # dx_1/dt = [cos(x_2(t)), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_2)) + betas[1] * (np.exp(x_2))

def eq_269_1(X, betas, t):
    # dx_2/dt = [cos(x_3(t))/x_1(t), exp(x_1(t))*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_3)/x_1) + betas[3] * (np.exp(x_1)*np.sin(x_3))

def eq_269_2(X, betas, t):
    # dx_3/dt = [x_2(t), x_2(t)*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_2) + betas[5] * (x_2*np.cos(x_1))

def system_269(X, betas, t):
    return np.array([eq_269_0(X, betas, t), eq_269_1(X, betas, t), eq_269_2(X, betas, t)])

def eq_270_0(X, betas, t):
    # dx_1/dt = [sin(x_2(t))/x_1(t), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_2)/x_1) + betas[1] * (x_3*np.sin(x_2))

def eq_270_1(X, betas, t):
    # dx_2/dt = [x_3(t)*exp(-x_1(t)), exp(x_3(t))/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3*np.exp(-x_1)) + betas[3] * (np.exp(x_3)/x_1)

def eq_270_2(X, betas, t):
    # dx_3/dt = [x_1(t)*exp(x_2(t)), cos(x_3(t))/x_1(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_1*np.exp(x_2)) + betas[5] * (np.cos(x_3)/x_1) + betas[6] * (np.exp(x_1))

def system_270(X, betas, t):
    return np.array([eq_270_0(X, betas, t), eq_270_1(X, betas, t), eq_270_2(X, betas, t)])

def eq_271_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))/x_2(t), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)/x_2) + betas[1] * (np.exp(x_2))

def eq_271_1(X, betas, t):
    # dx_2/dt = [exp(x_1(t))*cos(x_2(t)), sin(x_3(t))/cos(x_1(t)), x_2(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_1)*np.cos(x_2)) + betas[3] * (np.sin(x_3)/np.cos(x_1)) + betas[4] * (x_2*x_3)

def eq_271_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_3)) + betas[6] * (x_2)

def system_271(X, betas, t):
    return np.array([eq_271_0(X, betas, t), eq_271_1(X, betas, t), eq_271_2(X, betas, t)])

def eq_272_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t)), x_2(t), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)) + betas[1] * (x_2) + betas[2] * (np.exp(x_1))

def eq_272_1(X, betas, t):
    # dx_2/dt = [x_3(t), sin(x_3(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3) + betas[4] * (np.sin(x_3)) + betas[5] * (np.exp(x_1))

def eq_272_2(X, betas, t):
    # dx_3/dt = [x_1(t)*x_3(t), x_3(t)/cos(x_2(t)), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (x_1*x_3) + betas[7] * (x_3/np.cos(x_2)) + betas[8] * (np.sin(x_1))

def system_272(X, betas, t):
    return np.array([eq_272_0(X, betas, t), eq_272_1(X, betas, t), eq_272_2(X, betas, t)])

def eq_273_0(X, betas, t):
    # dx_1/dt = [x_1(t)*exp(x_3(t)), x_1(t)*x_2(t), x_3(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*np.exp(x_3)) + betas[1] * (x_1*x_2) + betas[2] * (x_3*np.exp(x_2))

def eq_273_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_1(t)*x_2(t), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1) + betas[4] * (x_1*x_2) + betas[5] * (np.cos(x_3))

def eq_273_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t)), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.exp(x_3)) + betas[7] * (np.exp(x_2))

def system_273(X, betas, t):
    return np.array([eq_273_0(X, betas, t), eq_273_1(X, betas, t), eq_273_2(X, betas, t)])

def eq_274_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))/x_1(t), x_3(t), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)/x_1) + betas[1] * (x_3) + betas[2] * (np.sin(x_1))

def eq_274_1(X, betas, t):
    # dx_2/dt = [x_3(t), x_1(t)*cos(x_2(t)), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3) + betas[4] * (x_1*np.cos(x_2)) + betas[5] * (np.cos(x_2))

def eq_274_2(X, betas, t):
    # dx_3/dt = [x_2(t)*cos(x_3(t)), exp(x_3(t))/sin(x_2(t)), exp(x_1(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_2*np.cos(x_3)) + betas[7] * (np.exp(x_3)/np.sin(x_2)) + betas[8] * (np.exp(x_1)/x_3)

def system_274(X, betas, t):
    return np.array([eq_274_0(X, betas, t), eq_274_1(X, betas, t), eq_274_2(X, betas, t)])

def eq_275_0(X, betas, t):
    # dx_1/dt = [cos(x_2(t))*cos(x_3(t)), x_1(t)*exp(-x_2(t)), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_2)*np.cos(x_3)) + betas[1] * (x_1*np.exp(-x_2)) + betas[2] * (np.sin(x_1))

def eq_275_1(X, betas, t):
    # dx_2/dt = [cos(x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_1)) + betas[4] * (x_1)

def eq_275_2(X, betas, t):
    # dx_3/dt = [x_1(t)/cos(x_3(t)), exp(x_1(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1/np.cos(x_3)) + betas[6] * (np.exp(x_1)/x_3)

def system_275(X, betas, t):
    return np.array([eq_275_0(X, betas, t), eq_275_1(X, betas, t), eq_275_2(X, betas, t)])

def eq_276_0(X, betas, t):
    # dx_1/dt = [x_3(t)/x_1(t), x_3(t)*cos(x_2(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3/x_1) + betas[1] * (x_3*np.cos(x_2)) + betas[2] * (x_1*x_3)

def eq_276_1(X, betas, t):
    # dx_2/dt = [x_3(t)/sin(x_1(t)), exp(x_3(t)), x_2(t)*exp(-x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_3/np.sin(x_1)) + betas[4] * (np.exp(x_3)) + betas[5] * (x_2*np.exp(-x_1))

def eq_276_2(X, betas, t):
    # dx_3/dt = [exp(x_2(t)), exp(-x_2(t))*sin(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (np.exp(x_2)) + betas[7] * (np.exp(-x_2)*np.sin(x_3)) + betas[8] * (x_2)

def system_276(X, betas, t):
    return np.array([eq_276_0(X, betas, t), eq_276_1(X, betas, t), eq_276_2(X, betas, t)])

def eq_277_0(X, betas, t):
    # dx_1/dt = [x_3(t), x_3(t)/x_1(t), cos(x_1(t))/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3) + betas[1] * (x_3/x_1) + betas[2] * (np.cos(x_1)/x_2)

def eq_277_1(X, betas, t):
    # dx_2/dt = [exp(-x_1(t))*exp(x_2(t)), sin(x_1(t))/x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(-x_1)*np.exp(x_2)) + betas[4] * (np.sin(x_1)/x_3) + betas[5] * (x_1)

def eq_277_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t))*cos(x_3(t)), cos(x_1(t))/x_2(t), exp(x_1(t))*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[6] * (np.exp(x_1)*np.cos(x_3)) + betas[7] * (np.cos(x_1)/x_2) + betas[8] * (np.exp(x_1)*np.exp(x_2))

def system_277(X, betas, t):
    return np.array([eq_277_0(X, betas, t), eq_277_1(X, betas, t), eq_277_2(X, betas, t)])

def eq_278_0(X, betas, t):
    # dx_1/dt = [x_1(t)*sin(x_2(t)), x_3(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*np.sin(x_2)) + betas[1] * (x_3/x_2)

def eq_278_1(X, betas, t):
    # dx_2/dt = [cos(x_3(t)), x_1(t)*cos(x_2(t)), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_3)) + betas[3] * (x_1*np.cos(x_2)) + betas[4] * (np.sin(x_2))

def eq_278_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t))/cos(x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (np.exp(x_3)/np.cos(x_1)) + betas[6] * (x_1)

def system_278(X, betas, t):
    return np.array([eq_278_0(X, betas, t), eq_278_1(X, betas, t), eq_278_2(X, betas, t)])

def eq_279_0(X, betas, t):
    # dx_1/dt = [x_3(t)/sin(x_2(t)), x_3(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3/np.sin(x_2)) + betas[1] * (x_3/x_2)

def eq_279_1(X, betas, t):
    # dx_2/dt = [x_3(t), x_3(t)*exp(x_1(t)), sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_3) + betas[3] * (x_3*np.exp(x_1)) + betas[4] * (np.sin(x_1))

def eq_279_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3) + betas[6] * (x_2)

def system_279(X, betas, t):
    return np.array([eq_279_0(X, betas, t), eq_279_1(X, betas, t), eq_279_2(X, betas, t)])

def eq_280_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)) + betas[1] * (x_1)

def eq_280_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1)

def eq_280_2(X, betas, t):
    # dx_3/dt = [x_1(t)/sin(x_2(t)), x_3(t), x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1/np.sin(x_2)) + betas[4] * (x_3) + betas[5] * (x_3*np.sin(x_2))

def system_280(X, betas, t):
    return np.array([eq_280_0(X, betas, t), eq_280_1(X, betas, t), eq_280_2(X, betas, t)])

def eq_281_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))*cos(x_2(t)), x_1(t)*exp(x_3(t)), exp(x_2(t))/sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)*np.cos(x_2)) + betas[1] * (x_1*np.exp(x_3)) + betas[2] * (np.exp(x_2)/np.sin(x_1))

def eq_281_1(X, betas, t):
    # dx_2/dt = [x_1(t)*exp(-x_2(t)), exp(x_2(t))/sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.exp(-x_2)) + betas[4] * (np.exp(x_2)/np.sin(x_3))

def eq_281_2(X, betas, t):
    # dx_3/dt = [x_2(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_2)

def system_281(X, betas, t):
    return np.array([eq_281_0(X, betas, t), eq_281_1(X, betas, t), eq_281_2(X, betas, t)])

def eq_282_0(X, betas, t):
    # dx_1/dt = [sin(x_3(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_3)) + betas[1] * (x_3)

def eq_282_1(X, betas, t):
    # dx_2/dt = [cos(x_1(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_1)) + betas[3] * (x_1)

def eq_282_2(X, betas, t):
    # dx_3/dt = [sin(x_2(t))/x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_2)/x_3) + betas[5] * (x_1)

def system_282(X, betas, t):
    return np.array([eq_282_0(X, betas, t), eq_282_1(X, betas, t), eq_282_2(X, betas, t)])

def eq_283_0(X, betas, t):
    # dx_1/dt = [x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2)

def eq_283_1(X, betas, t):
    # dx_2/dt = [x_3(t), cos(x_1(t))/sin(x_2(t)), x_1(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (x_3) + betas[2] * (np.cos(x_1)/np.sin(x_2)) + betas[3] * (x_1*x_3)

def eq_283_2(X, betas, t):
    # dx_3/dt = [exp(x_2(t)), x_1(t), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_2)) + betas[5] * (x_1) + betas[6] * (x_2)

def system_283(X, betas, t):
    return np.array([eq_283_0(X, betas, t), eq_283_1(X, betas, t), eq_283_2(X, betas, t)])

def eq_284_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)) + betas[1] * (x_1)

def eq_284_1(X, betas, t):
    # dx_2/dt = [exp(x_3(t))*sin(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_3)*np.sin(x_1)) + betas[3] * (x_3)

def eq_284_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), sin(x_1(t))*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.cos(x_3)) + betas[5] * (np.sin(x_1)*np.cos(x_2))

def system_284(X, betas, t):
    return np.array([eq_284_0(X, betas, t), eq_284_1(X, betas, t), eq_284_2(X, betas, t)])

def eq_285_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))/sin(x_2(t)), exp(x_1(t))*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)/np.sin(x_2)) + betas[1] * (np.exp(x_1)*np.sin(x_2))

def eq_285_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1/x_3)

def eq_285_2(X, betas, t):
    # dx_3/dt = [x_1(t)*cos(x_3(t)), cos(x_2(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_1*np.cos(x_3)) + betas[4] * (np.cos(x_2)) + betas[5] * (x_3)

def system_285(X, betas, t):
    return np.array([eq_285_0(X, betas, t), eq_285_1(X, betas, t), eq_285_2(X, betas, t)])

def eq_286_0(X, betas, t):
    # dx_1/dt = [exp(x_1(t)), x_1(t)*x_2(t), x_3(t)*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_1)) + betas[1] * (x_1*x_2) + betas[2] * (x_3*np.sin(x_1))

def eq_286_1(X, betas, t):
    # dx_2/dt = [cos(x_1(t)), sin(x_2(t)), exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_1)) + betas[4] * (np.sin(x_2)) + betas[5] * (np.exp(x_1))

def eq_286_2(X, betas, t):
    # dx_3/dt = [x_2(t)*x_3(t), exp(x_1(t)), x_3(t)/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_2*x_3) + betas[7] * (np.exp(x_1)) + betas[8] * (x_3/x_2)

def system_286(X, betas, t):
    return np.array([eq_286_0(X, betas, t), eq_286_1(X, betas, t), eq_286_2(X, betas, t)])

def eq_287_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t)), exp(x_3(t))/cos(x_1(t)), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)) + betas[1] * (np.exp(x_3)/np.cos(x_1)) + betas[2] * (x_3)

def eq_287_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2) + betas[4] * (x_3)

def eq_287_2(X, betas, t):
    # dx_3/dt = [sin(x_3(t))*cos(x_2(t)), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[5] * (np.sin(x_3)*np.cos(x_2)) + betas[6] * (np.cos(x_1))

def system_287(X, betas, t):
    return np.array([eq_287_0(X, betas, t), eq_287_1(X, betas, t), eq_287_2(X, betas, t)])

def eq_288_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t)), x_3(t), cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)) + betas[1] * (x_3) + betas[2] * (np.cos(x_1))

def eq_288_1(X, betas, t):
    # dx_2/dt = [cos(x_1(t)), sin(x_1(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_1)) + betas[4] * (np.sin(x_1)/x_3)

def eq_288_2(X, betas, t):
    # dx_3/dt = [x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_3) + betas[6] * (x_1)

def system_288(X, betas, t):
    return np.array([eq_288_0(X, betas, t), eq_288_1(X, betas, t), eq_288_2(X, betas, t)])

def eq_289_0(X, betas, t):
    # dx_1/dt = [x_1(t), exp(x_1(t)), cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1) + betas[1] * (np.exp(x_1)) + betas[2] * (np.cos(x_3))

def eq_289_1(X, betas, t):
    # dx_2/dt = [cos(x_3(t)), x_2(t), exp(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_3)) + betas[4] * (x_2) + betas[5] * (np.exp(x_3))

def eq_289_2(X, betas, t):
    # dx_3/dt = [x_1(t)*sin(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (x_1*np.sin(x_3)) + betas[7] * (x_1)

def system_289(X, betas, t):
    return np.array([eq_289_0(X, betas, t), eq_289_1(X, betas, t), eq_289_2(X, betas, t)])

def eq_290_0(X, betas, t):
    # dx_1/dt = [x_1(t)*exp(x_3(t)), exp(x_1(t))*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*np.exp(x_3)) + betas[1] * (np.exp(x_1)*np.cos(x_3))

def eq_290_1(X, betas, t):
    # dx_2/dt = [x_1(t)*exp(-x_2(t)), sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*np.exp(-x_2)) + betas[3] * (np.sin(x_3))

def eq_290_2(X, betas, t):
    # dx_3/dt = [cos(x_2(t))/x_3(t), exp(x_2(t))/x_3(t), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.cos(x_2)/x_3) + betas[5] * (np.exp(x_2)/x_3) + betas[6] * (x_1)

def system_290(X, betas, t):
    return np.array([eq_290_0(X, betas, t), eq_290_1(X, betas, t), eq_290_2(X, betas, t)])

def eq_291_0(X, betas, t):
    # dx_1/dt = [x_3(t)*exp(x_1(t)), x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.exp(x_1)) + betas[1] * (x_1*x_2)

def eq_291_1(X, betas, t):
    # dx_2/dt = [x_2(t), exp(x_2(t))/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2) + betas[3] * (np.exp(x_2)/x_1)

def eq_291_2(X, betas, t):
    # dx_3/dt = [cos(x_2(t)), x_3(t)/sin(x_2(t)), x_2(t)/sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.cos(x_2)) + betas[5] * (x_3/np.sin(x_2)) + betas[6] * (x_2/np.sin(x_1))

def system_291(X, betas, t):
    return np.array([eq_291_0(X, betas, t), eq_291_1(X, betas, t), eq_291_2(X, betas, t)])

def eq_292_0(X, betas, t):
    # dx_1/dt = [x_3(t)*exp(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.exp(x_1)) + betas[1] * (x_2)

def eq_292_1(X, betas, t):
    # dx_2/dt = [x_2(t), exp(x_2(t))/x_3(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2) + betas[3] * (np.exp(x_2)/x_3)

def eq_292_2(X, betas, t):
    # dx_3/dt = [x_3(t), sin(x_2(t)), exp(x_3(t))/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3) + betas[5] * (np.sin(x_2)) + betas[6] * (np.exp(x_3)/x_1)

def system_292(X, betas, t):
    return np.array([eq_292_0(X, betas, t), eq_292_1(X, betas, t), eq_292_2(X, betas, t)])

def eq_293_0(X, betas, t):
    # dx_1/dt = [x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3)

def eq_293_1(X, betas, t):
    # dx_2/dt = [x_2(t)*x_3(t), x_2(t)/x_1(t), x_1(t)*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_2*x_3) + betas[2] * (x_2/x_1) + betas[3] * (x_1*np.cos(x_2))

def eq_293_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))/sin(x_3(t)), sin(x_3(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)/np.sin(x_3)) + betas[5] * (np.sin(x_3)) + betas[6] * (x_1)

def system_293(X, betas, t):
    return np.array([eq_293_0(X, betas, t), eq_293_1(X, betas, t), eq_293_2(X, betas, t)])

def eq_294_0(X, betas, t):
    # dx_1/dt = [cos(x_3(t)), sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_3)) + betas[1] * (np.sin(x_2))

def eq_294_1(X, betas, t):
    # dx_2/dt = [cos(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_3)) + betas[3] * (x_2)

def eq_294_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)) + betas[5] * (x_2)

def system_294(X, betas, t):
    return np.array([eq_294_0(X, betas, t), eq_294_1(X, betas, t), eq_294_2(X, betas, t)])

def eq_295_0(X, betas, t):
    # dx_1/dt = [sin(x_2(t))/x_3(t), x_3(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_2)/x_3) + betas[1] * (x_3*np.exp(x_1))

def eq_295_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t)), sin(x_2(t))/x_3(t), x_1(t)/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_1)) + betas[3] * (np.sin(x_2)/x_3) + betas[4] * (x_1/np.cos(x_2))

def eq_295_2(X, betas, t):
    # dx_3/dt = [x_1(t)/x_2(t), x_3(t)*exp(x_2(t)), x_1(t)]
    x_1, x_2, x_3 = X
    return betas[5] * (x_1/x_2) + betas[6] * (x_3*np.exp(x_2)) + betas[7] * (x_1)

def system_295(X, betas, t):
    return np.array([eq_295_0(X, betas, t), eq_295_1(X, betas, t), eq_295_2(X, betas, t)])

def eq_296_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))*cos(x_2(t)), exp(x_1(t))/cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)*np.cos(x_2)) + betas[1] * (np.exp(x_1)/np.cos(x_2))

def eq_296_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_1)) + betas[3] * (x_2)

def eq_296_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), exp(x_1(t))/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_1)) + betas[5] * (np.exp(x_1)/x_2)

def system_296(X, betas, t):
    return np.array([eq_296_0(X, betas, t), eq_296_1(X, betas, t), eq_296_2(X, betas, t)])

def eq_297_0(X, betas, t):
    # dx_1/dt = [x_2(t)*cos(x_1(t)), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2*np.cos(x_1)) + betas[1] * (np.exp(x_2))

def eq_297_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t)*exp(-x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1) + betas[3] * (x_2*np.exp(-x_3))

def eq_297_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*sin(x_3(t)), x_1(t), x_2(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_1)*np.sin(x_3)) + betas[5] * (x_1) + betas[6] * (x_2*x_3)

def system_297(X, betas, t):
    return np.array([eq_297_0(X, betas, t), eq_297_1(X, betas, t), eq_297_2(X, betas, t)])

def eq_298_0(X, betas, t):
    # dx_1/dt = [x_1(t)*exp(x_3(t)), x_3(t), exp(x_3(t))*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_1*np.exp(x_3)) + betas[1] * (x_3) + betas[2] * (np.exp(x_3)*np.sin(x_2))

def eq_298_1(X, betas, t):
    # dx_2/dt = [exp(x_3(t)), cos(x_2(t)), sin(x_1(t))/sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_3)) + betas[4] * (np.cos(x_2)) + betas[5] * (np.sin(x_1)/np.sin(x_3))

def eq_298_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), sin(x_3(t)), x_2(t)]
    x_1, x_2, x_3 = X
    return betas[6] * (np.exp(x_1)) + betas[7] * (np.sin(x_3)) + betas[8] * (x_2)

def system_298(X, betas, t):
    return np.array([eq_298_0(X, betas, t), eq_298_1(X, betas, t), eq_298_2(X, betas, t)])

def eq_299_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2) + betas[1] * (x_1*np.sin(x_3))

def eq_299_1(X, betas, t):
    # dx_2/dt = [cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.cos(x_3))

def eq_299_2(X, betas, t):
    # dx_3/dt = [x_2(t)*sin(x_3(t)), cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2*np.sin(x_3)) + betas[4] * (np.cos(x_2))

def system_299(X, betas, t):
    return np.array([eq_299_0(X, betas, t), eq_299_1(X, betas, t), eq_299_2(X, betas, t)])

